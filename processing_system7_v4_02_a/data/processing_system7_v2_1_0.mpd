#-- Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
#--
#-- This file contains confidential and proprietary information
#-- of Xilinx, Inc. and is protected under U.S. and
#-- international copyright and other intellectual property
#-- laws.
#--
#-- DISCLAIMER
#-- This disclaimer is not a license and does not grant any
#-- rights to the materials distributed herewith. Except as
#-- otherwise provided in a valid license issued to you by
#-- Xilinx, and to the maximum extent permitted by applicable
#-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
#-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
#-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
#-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
#-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
#-- (2) Xilinx shall not be liable (whether in contract or tort,
#-- including negligence, or under any other theory of
#-- liability) for any loss or damage of any kind or nature
#-- related to, arising under or in connection with these
#-- materials, including for any direct, or any indirect,
#-- special, incidental, or consequential loss or damage
#-- (including loss of data, profits, goodwill, or any type of
#-- loss or damage suffered as a result of any action brought
#-- by a third party) even if such damage or loss was
#-- reasonably foreseeable or Xilinx had been advised of the
#-- possibility of the same.
#--
#-- CRITICAL APPLICATIONS
#-- Xilinx products are not designed or intended to be fail-
#-- safe, or for use in any application requiring fail-safe
#-- performance, such as life-support or safety devices or
#-- systems, Class III medical devices, nuclear facilities,
#-- applications related to the deployment of airbags, or any
#-- other applications that could lead to death, personal
#-- injury, or severe property or environmental damage
#-- (individually and collectively, "Critical
#-- Applications"). Customer assumes the sole risk and
#-- liability of any use of Xilinx products in Critical
#-- Applications, subject only to applicable laws and
#-- regulations governing limitations on product liability.
#--
#-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
#-- PART OF THIS FILE AT ALL TIMES.

###################################################################
##
## Name     : processing_system7
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN processing_system7

## Peripheral Options
OPTION IPTYPE = PROCESSOR
OPTION HDL = VERILOG
OPTION IMP_NETLIST = TRUE
OPTION IPLEVEL_DRC_PROC = iplevel_drc_proc
OPTION SYSLEVEL_DRC_PROC = syslevel_drc_proc
OPTION PLATGEN_SYSLEVEL_UPDATE_PROC = platgen_syslevel_update_proc
OPTION SYSLEVEL_UPDATE_PROC = syslevel_update_proc
OPTION SPECIAL = ARM
OPTION RUN_NGCBUILD = FALSE
OPTION STYLE = HDL
OPTION ADDITIONAL_OUTPUTS = CONSTRAINTS|POWER
OPTION DESC = Processing System
OPTION LONG_DESC = Processing System wrapper for Series 7
OPTION IP_GROUP = Processor:ARM-A9
OPTION ARCH_SUPPORT_MAP = (zynq=PRE_PRODUCTION, azynq=PRE_PRODUCTION, qzynq=PRE_PRODUCTION)

IO_INTERFACE IO_IF = ETHERNETIF_0, IO_TYPE = XIL_AXIETHERNET_V1, ISVALID = (C_EN_EMIO_ENET0 == 1)
IO_INTERFACE IO_IF = ETHERNETIF_1, IO_TYPE = XIL_AXIETHERNET_V1, ISVALID = (C_EN_EMIO_ENET1 == 1)
IO_INTERFACE IO_IF = GPIO_0, IO_TYPE = XIL_GPIO_V1, ISVALID = (C_EN_EMIO_GPIO == 1)
IO_INTERFACE IO_IF = MEMORY_0, IO_TYPE = XIL_MEMORY_V1
IO_INTERFACE IO_IF = PS_REQUIRED_EXTERNAL_IO, IO_TYPE = XIL_REQUIRED_EXTERNAL_IO
IO_INTERFACE IO_IF = UART_0, IO_TYPE = XIL_UART_V1, ISVALID = (C_EN_EMIO_UART0 == 1 || C_EN_EMIO_MODEM_UART0 == 1)
IO_INTERFACE IO_IF = UART_1, IO_TYPE = XIL_UART_V1, ISVALID = (C_EN_EMIO_UART1 == 1 || C_EN_EMIO_MODEM_UART1 == 1)
IO_INTERFACE IO_IF = IIC_0, IO_TYPE = XIL_IIC_V1, ISVALID = (C_EN_EMIO_I2C0 == 1)
IO_INTERFACE IO_IF = IIC_1, IO_TYPE = XIL_IIC_V1, ISVALID = (C_EN_EMIO_I2C1 == 1)
IO_INTERFACE IO_IF = SPI_0, IO_TYPE = XIL_SPI_V1, ISVALID = (C_EN_EMIO_SPI0 == 1)
IO_INTERFACE IO_IF = SPI_1, IO_TYPE = XIL_SPI_V1, ISVALID = (C_EN_EMIO_SPI1 == 1)
IO_INTERFACE IO_IF = CAN_0, IO_TYPE = XIL_CAN_V1, ISVALID = (C_EN_EMIO_CAN0 == 1)
IO_INTERFACE IO_IF = CAN_1, IO_TYPE = XIL_CAN_V1, ISVALID = (C_EN_EMIO_CAN1 == 1)
IO_INTERFACE IO_IF = PJTAG, IO_TYPE = XIL_JTAG_V1, ISVALID = (C_EN_EMIO_PJTAG == 1)
IO_INTERFACE IO_IF = SDIO_0, IO_TYPE = XIL_SDIO_V1, ISVALID = (C_EN_EMIO_SDIO0 == 1 || C_EN_EMIO_CD_SDIO0 == 1 || C_EN_EMIO_WP_SDIO0 == 1)
IO_INTERFACE IO_IF = SDIO_1, IO_TYPE = XIL_SDIO_V1, ISVALID = (C_EN_EMIO_SDIO1 == 1 || C_EN_EMIO_CD_SDIO1 == 1 || C_EN_EMIO_WP_SDIO1 == 1)
IO_INTERFACE IO_IF = TTC_0, IO_TYPE = XIL_TTC_V1, ISVALID = (C_EN_TTC0 == 1)
IO_INTERFACE IO_IF = TTC_1, IO_TYPE = XIL_TTC_V1, ISVALID = (C_EN_TTC1 == 1)
IO_INTERFACE IO_IF = WDT_0, IO_TYPE = XIL_WDT_V1, ISVALID = (C_EN_EMIO_WDT == 1)
IO_INTERFACE IO_IF = TRACE_0, IO_TYPE = XIL_TRACE_V1, ISVALID = (C_EN_EMIO_TRACE == 1)
IO_INTERFACE IO_IF = USBIND_0, IO_TYPE = XIL_USBIND_V1, ISVALID = (C_EN_USB0 == 1)
IO_INTERFACE IO_IF = USBIND_1, IO_TYPE = XIL_USBIND_V1, ISVALID = (C_EN_USB1 == 1)
IO_INTERFACE IO_IF = S_AXI_HP0_FIFO_CTRL, IO_TYPE = XIL_HP_FIFO_CTRL_V1, ISVALID = (C_USE_S_AXI_HP0 == 1)
IO_INTERFACE IO_IF = S_AXI_HP1_FIFO_CTRL, IO_TYPE = XIL_HP_FIFO_CTRL_V1, ISVALID = (C_USE_S_AXI_HP1 == 1)
IO_INTERFACE IO_IF = S_AXI_HP2_FIFO_CTRL, IO_TYPE = XIL_HP_FIFO_CTRL_V1, ISVALID = (C_USE_S_AXI_HP2 == 1)
IO_INTERFACE IO_IF = S_AXI_HP3_FIFO_CTRL, IO_TYPE = XIL_HP_FIFO_CTRL_V1, ISVALID = (C_USE_S_AXI_HP3 == 1)
IO_INTERFACE IO_IF = DMA0_REQ, IO_TYPE = XIL_DMA_REQ_V1, ISVALID = (C_USE_DMA0 == 1)
IO_INTERFACE IO_IF = DMA1_REQ, IO_TYPE = XIL_DMA_REQ_V1, ISVALID = (C_USE_DMA1 == 1)
IO_INTERFACE IO_IF = DMA2_REQ, IO_TYPE = XIL_DMA_REQ_V1, ISVALID = (C_USE_DMA2 == 1)
IO_INTERFACE IO_IF = DMA3_REQ, IO_TYPE = XIL_DMA_REQ_V1, ISVALID = (C_USE_DMA3 == 1)
IO_INTERFACE IO_IF = FTM_TRACE_DATA, IO_TYPE = XIL_FTMD_V1, ISVALID = (C_USE_TRACE == 1)
IO_INTERFACE IO_IF = FTM_TRIG, IO_TYPE = XIL_FTMTIO_V1, ISVALID = (C_USE_CROSS_TRIGGER == 1)
IO_INTERFACE IO_IF = PROC_EVENT, IO_TYPE = XIL_PROC_EVENT_V1, ISVALID = (C_USE_PROC_EVENT_BUS == 1)

## Bus Interfaces
BUS_INTERFACE BUS = M_AXI_GP0, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = (C_USE_M_AXI_GP0 == 1)
BUS_INTERFACE BUS = M_AXI_GP1, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = (C_USE_M_AXI_GP1 == 1)
BUS_INTERFACE BUS = S_AXI_GP0, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = (C_USE_S_AXI_GP0 == 1)
BUS_INTERFACE BUS = S_AXI_GP1, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = (C_USE_S_AXI_GP1 == 1)
BUS_INTERFACE BUS = S_AXI_ACP, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = (C_USE_S_AXI_ACP == 1)
BUS_INTERFACE BUS = S_AXI_HP0, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = (C_USE_S_AXI_HP0 == 1)
BUS_INTERFACE BUS = S_AXI_HP1, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = (C_USE_S_AXI_HP1 == 1)
BUS_INTERFACE BUS = S_AXI_HP2, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = (C_USE_S_AXI_HP2 == 1)
BUS_INTERFACE BUS = S_AXI_HP3, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = (C_USE_S_AXI_HP3 == 1)

## Generics for VHDL or Parameters for Verilog
PARAMETER C_EN_EMIO_CAN0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_EMIO_CAN1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_EMIO_ENET0 = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_EMIO_ENET1 = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_EMIO_GPIO = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = UPDATE, RANGE = (0,1)
PARAMETER C_EN_EMIO_I2C0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_EMIO_I2C1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_EMIO_PJTAG = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_EMIO_SDIO0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_EMIO_CD_SDIO0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_EMIO_WP_SDIO0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_EMIO_SDIO1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_EMIO_CD_SDIO1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_EMIO_WP_SDIO1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_EMIO_SPI0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_EMIO_SPI1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_EMIO_UART0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_EMIO_UART1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_EMIO_MODEM_UART0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_EMIO_MODEM_UART1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_EMIO_TTC0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_EMIO_TTC1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_EMIO_WDT = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_EMIO_TRACE = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_USE_M_AXI_GP0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_USE_M_AXI_GP1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_USE_S_AXI_GP0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_USE_S_AXI_GP1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_USE_S_AXI_ACP = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_USE_S_AXI_HP0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_USE_S_AXI_HP1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_USE_S_AXI_HP2 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_USE_S_AXI_HP3 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_S_AXI_GP0_ENABLE_LOWOCM_DDR = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_S_AXI_GP0 == 1)
PARAMETER C_S_AXI_GP1_ENABLE_LOWOCM_DDR = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_S_AXI_GP1 == 1)
PARAMETER C_S_AXI_ACP_ENABLE_HIGHOCM = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_S_AXI_ACP == 1)
PARAMETER C_S_AXI_HP0_ENABLE_HIGHOCM = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_S_AXI_HP0 == 1)
PARAMETER C_S_AXI_HP1_ENABLE_HIGHOCM = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_S_AXI_HP1 == 1)
PARAMETER C_S_AXI_HP2_ENABLE_HIGHOCM = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_S_AXI_HP2 == 1)
PARAMETER C_S_AXI_HP3_ENABLE_HIGHOCM = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_S_AXI_HP3 == 1)
PARAMETER C_USE_DMA0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_USE_DMA1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_USE_DMA2 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_USE_DMA3 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_USE_TRACE = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_INCLUDE_TRACE_BUFFER = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_TRACE == 1)
PARAMETER C_TRACE_BUFFER_FIFO_SIZE = 128, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (32, 64, 128, 256), ISVALID = (C_USE_TRACE == 1)
PARAMETER USE_TRACE_DATA_EDGE_DETECTOR = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_TRACE == 1)
PARAMETER C_TRACE_BUFFER_CLOCK_DELAY = 12, DT = INTEGER, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_TRACE == 1)
PARAMETER C_USE_CROSS_TRIGGER = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_USE_CR_FABRIC = 1, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_USE_AXI_FABRIC_IDLE = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_USE_DDR_BYPASS = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_USE_FABRIC_INTERRUPT = 1, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_USE_PROC_EVENT_BUS = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_EMIO_SRAM_INT = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EMIO_GPIO_WIDTH = 64, DT = INTEGER, ASSIGNMENT = UPDATE, RANGE = (1:64), ISVALID = (C_EN_EMIO_GPIO == 1)
PARAMETER C_INCLUDE_ACP_TRANS_CHECK = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_USE_DEFAULT_ACP_USER_VAL = 0, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_S_AXI_ACP == 1)
PARAMETER C_S_AXI_ACP_ARUSER_VAL = 31, DT = INTEGER, BUS = S_AXI_ACP, RANGE = (0:31), ASSIGNMENT = OPTIONAL, ISVALID = (C_USE_S_AXI_ACP == 1 && C_USE_DEFAULT_ACP_USER_VAL == 1)
PARAMETER C_S_AXI_ACP_AWUSER_VAL = 31, DT = INTEGER, BUS = S_AXI_ACP, RANGE = (0:31), ASSIGNMENT = OPTIONAL, ISVALID = (C_USE_S_AXI_ACP == 1 && C_USE_DEFAULT_ACP_USER_VAL == 1)
PARAMETER C_DQ_WIDTH = 32, DT = INTEGER, RANGE = (16, 32), ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_for_dq_ports
PARAMETER C_DQS_WIDTH = 4, DT = INTEGER, RANGE = (0:4), ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_for_dqs_ports
PARAMETER C_DM_WIDTH = 4, DT = INTEGER, RANGE = (0:4), ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_for_dm_ports
PARAMETER C_MIO_PRIMITIVE = 54, DT = INTEGER, RANGE = (54, 32), ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_for_mio_primitive
PARAMETER C_PACKAGE_NAME = clg484, DT = STRING, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_for_package
PARAMETER C_PS7_SI_REV = PRODUCTION, DT = STRING, VALUES = (1.0=1.0, 2.0=2.0, 3.0=3.0, PRODUCTION=PRODUCTION), ASSIGNMENT = OPTIONAL
PARAMETER C_UART_BAUD_RATE = 115200, DT = STRING, VALUES = (110= 110 , 300= 300 , 1200= 1200 , 2400= 2400 , 4800= 4800 , 9600= 9600 , 19200= 19200 , 38400= 38400 , 57600= 57600 , 115200= 115200 , 128000= 128000 , 230400= 230400 , 460800= 460800 , 921600= 921600), ASSIGNMENT = OPTIONAL, TYPE = NON_HDL, ISVALID = ((C_EN_UART0 == 1) || (C_EN_UART1))
PARAMETER C_DDR_RAM_BASEADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_DDR_RAM_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ADDR_TYPE = MEMORY, ISVALID = ( C_EN_DDR == 1)
PARAMETER C_DDR_RAM_HIGHADDR = 0x3FFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_DDR_RAM_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = OPTIONAL, TYPE = NON_HDL, ADDR_TYPE = MEMORY, ISVALID = ( C_EN_DDR == 1)
PARAMETER C_UART0_BASEADDR = 0xE0000000, DT = std_logic_vector(31 downto 0), PAIR = C_UART0_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_UART0 == 1)
PARAMETER C_UART0_HIGHADDR = 0xE0000FFF, DT = std_logic_vector(31 downto 0), PAIR = C_UART0_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_UART0 == 1)
PARAMETER C_UART1_BASEADDR = 0xE0001000, DT = std_logic_vector(31 downto 0), PAIR = C_UART1_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_UART1 == 1)
PARAMETER C_UART1_HIGHADDR = 0xE0001FFF, DT = std_logic_vector(31 downto 0), PAIR = C_UART1_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_UART1 == 1)
PARAMETER C_I2C0_BASEADDR = 0xE0004000, DT = std_logic_vector(31 downto 0), PAIR = C_I2C0_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_I2C0 == 1)
PARAMETER C_I2C0_HIGHADDR = 0xE0004FFF, DT = std_logic_vector(31 downto 0), PAIR = C_I2C0_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_I2C0 == 1)
PARAMETER C_I2C1_BASEADDR = 0xE0005000, DT = std_logic_vector(31 downto 0), PAIR = C_I2C1_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_I2C1 == 1)
PARAMETER C_I2C1_HIGHADDR = 0xE0005FFF, DT = std_logic_vector(31 downto 0), PAIR = C_I2C1_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_I2C1 == 1)
PARAMETER C_SPI0_BASEADDR = 0xE0006000, DT = std_logic_vector(31 downto 0), PAIR = C_SPI0_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_SPI0 == 1)
PARAMETER C_SPI0_HIGHADDR = 0xE0006FFF, DT = std_logic_vector(31 downto 0), PAIR = C_SPI0_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_SPI0 == 1)
PARAMETER C_SPI1_BASEADDR = 0xE0007000, DT = std_logic_vector(31 downto 0), PAIR = C_SPI1_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_SPI1 == 1)
PARAMETER C_SPI1_HIGHADDR = 0xE0007FFF, DT = std_logic_vector(31 downto 0), PAIR = C_SPI1_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_SPI1 == 1)
PARAMETER C_CAN0_BASEADDR = 0xE0008000, DT = std_logic_vector(31 downto 0), PAIR = C_CAN0_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_CAN0 == 1)
PARAMETER C_CAN0_HIGHADDR = 0xE0008FFF, DT = std_logic_vector(31 downto 0), PAIR = C_CAN0_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_CAN0 == 1)
PARAMETER C_CAN1_BASEADDR = 0xE0009000, DT = std_logic_vector(31 downto 0), PAIR = C_CAN1_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_CAN1 == 1)
PARAMETER C_CAN1_HIGHADDR = 0xE0009FFF, DT = std_logic_vector(31 downto 0), PAIR = C_CAN1_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_CAN1 == 1)
PARAMETER C_GPIO_BASEADDR = 0xE000A000, DT = std_logic_vector(31 downto 0), PAIR = C_GPIO_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_GPIO == 1)
PARAMETER C_GPIO_HIGHADDR = 0xE000AFFF, DT = std_logic_vector(31 downto 0), PAIR = C_GPIO_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_GPIO == 1)
PARAMETER C_ENET0_BASEADDR = 0xE000B000, DT = std_logic_vector(31 downto 0), PAIR = C_ENET0_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_ENET0 == 1)
PARAMETER C_ENET0_HIGHADDR = 0xE000BFFF, DT = std_logic_vector(31 downto 0), PAIR = C_ENET0_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_ENET0 == 1)
PARAMETER C_ENET1_BASEADDR = 0xE000C000, DT = std_logic_vector(31 downto 0), PAIR = C_ENET1_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_ENET1 == 1)
PARAMETER C_ENET1_HIGHADDR = 0xE000CFFF, DT = std_logic_vector(31 downto 0), PAIR = C_ENET1_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_ENET1 == 1)
PARAMETER C_SDIO0_BASEADDR = 0xE0100000, DT = std_logic_vector(31 downto 0), PAIR = C_SDIO0_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_SDIO0 == 1)
PARAMETER C_SDIO0_HIGHADDR = 0xE0100FFF, DT = std_logic_vector(31 downto 0), PAIR = C_SDIO0_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_SDIO0 == 1)
PARAMETER C_SDIO1_BASEADDR = 0xE0101000, DT = std_logic_vector(31 downto 0), PAIR = C_SDIO1_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_SDIO1 == 1)
PARAMETER C_SDIO1_HIGHADDR = 0xE0101FFF, DT = std_logic_vector(31 downto 0), PAIR = C_SDIO1_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_SDIO1 == 1)
PARAMETER C_USB0_BASEADDR = 0xE0102000, DT = std_logic_vector(31 downto 0), PAIR = C_USB0_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_USB0 == 1)
PARAMETER C_USB0_HIGHADDR = 0xE0102fff, DT = std_logic_vector(31 downto 0), PAIR = C_USB0_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_USB0 == 1)
PARAMETER C_USB1_BASEADDR = 0xE0103000, DT = std_logic_vector(31 downto 0), PAIR = C_USB1_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_USB1 == 1)
PARAMETER C_USB1_HIGHADDR = 0xE0103fff, DT = std_logic_vector(31 downto 0), PAIR = C_USB1_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_EN_USB1 == 1)
PARAMETER C_TTC0_BASEADDR = 0xE0104000, DT = std_logic_vector(31 downto 0), PAIR = C_TTC0_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, type = NON_HDL, ISVALID = (C_EN_TTC0 == 1)
PARAMETER C_TTC0_HIGHADDR = 0xE0104fff, DT = std_logic_vector(31 downto 0), PAIR = C_TTC0_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, type = NON_HDL, ISVALID = (C_EN_TTC0 == 1)
PARAMETER C_TTC1_BASEADDR = 0xE0105000, DT = std_logic_vector(31 downto 0), PAIR = C_TTC1_HIGHADDR, ADDRESS = BASE, ASSIGNMENT = CONSTANT, type = NON_HDL, ISVALID = (C_EN_TTC1 == 1)
PARAMETER C_TTC1_HIGHADDR = 0xE0105fff, DT = std_logic_vector(31 downto 0), PAIR = C_TTC1_BASEADDR, ADDRESS = HIGH, ASSIGNMENT = CONSTANT, type = NON_HDL, ISVALID = (C_EN_TTC1 == 1)
PARAMETER C_M_AXI_GP0_PROTOCOL = AXI3, DT = STRING, BUS = M_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_M_AXI_GP0 == 1)
PARAMETER C_M_AXI_GP0_ID_WIDTH = 12, DT = INTEGER, BUS = M_AXI_GP0, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_M_AXI_GP0 == 1)
PARAMETER C_M_AXI_GP0_ADDR_WIDTH = 32, DT = INTEGER, BUS = M_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_M_AXI_GP0 == 1)
PARAMETER C_M_AXI_GP0_DATA_WIDTH = 32, DT = INTEGER, BUS = M_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_M_AXI_GP0 == 1)
PARAMETER C_M_AXI_GP0_ENABLE_STATIC_REMAP = 0, DT = INTEGER, BUS = M_AXI_GP0, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_M_AXI_GP0 == 1)
PARAMETER C_M_AXI_GP0_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = M_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_M_AXI_GP0 == 1)
PARAMETER C_M_AXI_GP0_SUPPORTS_REORDERING = 0, DT = INTEGER, BUS = M_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_M_AXI_GP0 == 1)
PARAMETER C_INTERCONNECT_M_AXI_GP0_WRITE_ISSUING = 8, DT = INTEGER, BUS = M_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
PARAMETER C_INTERCONNECT_M_AXI_GP0_READ_ISSUING = 8, DT = INTEGER, BUS = M_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_GP1_PROTOCOL = AXI3, DT = STRING, BUS = M_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_M_AXI_GP1 == 1)
PARAMETER C_M_AXI_GP1_ID_WIDTH = 12, DT = INTEGER, BUS = M_AXI_GP1, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_M_AXI_GP1 == 1)
PARAMETER C_M_AXI_GP1_ADDR_WIDTH = 32, DT = INTEGER, BUS = M_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_M_AXI_GP1 == 1)
PARAMETER C_M_AXI_GP1_DATA_WIDTH = 32, DT = INTEGER, BUS = M_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_M_AXI_GP1 == 1)
PARAMETER C_M_AXI_GP1_ENABLE_STATIC_REMAP = 0, DT = INTEGER, BUS = M_AXI_GP1, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_M_AXI_GP1 == 1)
PARAMETER C_M_AXI_GP1_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = M_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_M_AXI_GP1 == 1)
PARAMETER C_M_AXI_GP1_SUPPORTS_REORDERING = 0, DT = INTEGER, BUS = M_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1), ISVALID = (C_USE_M_AXI_GP1 == 1)
PARAMETER C_INTERCONNECT_M_AXI_GP1_WRITE_ISSUING = 8, DT = INTEGER, BUS = M_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
PARAMETER C_INTERCONNECT_M_AXI_GP1_READ_ISSUING = 8, DT = INTEGER, BUS = M_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_GP0_PROTOCOL = AXI3, DT = STRING, BUS = S_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_GP0 == 1)
PARAMETER C_S_AXI_GP0_ID_WIDTH = 6, DT = INTEGER, BUS = S_AXI_GP0, ASSIGNMENT = OPTIONAL, RANGE = (1 : 6 ), ISVALID = (C_USE_S_AXI_GP0 == 1)
PARAMETER C_S_AXI_GP0_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_GP0 == 1)
PARAMETER C_S_AXI_GP0_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_GP0 == 1)
PARAMETER C_INTERCONNECT_S_AXI_GP0_WRITE_ACCEPTANCE = 8, BUS = S_AXI_GP0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
PARAMETER C_INTERCONNECT_S_AXI_GP0_READ_ACCEPTANCE = 8, BUS = S_AXI_GP0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_GP1_PROTOCOL = AXI3, DT = STRING, BUS = S_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_GP1 == 1)
PARAMETER C_S_AXI_GP1_ID_WIDTH = 6, DT = INTEGER, BUS = S_AXI_GP1, ASSIGNMENT = OPTIONAL, RANGE = (1 : 6 ), ISVALID = (C_USE_S_AXI_GP1 == 1)
PARAMETER C_S_AXI_GP1_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_GP1 == 1)
PARAMETER C_S_AXI_GP1_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_GP1 == 1)
PARAMETER C_INTERCONNECT_S_AXI_GP1_WRITE_ACCEPTANCE = 8, BUS = S_AXI_GP1, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
PARAMETER C_INTERCONNECT_S_AXI_GP1_READ_ACCEPTANCE = 8, BUS = S_AXI_GP1, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ACP_PROTOCOL = AXI3, DT = STRING, BUS = S_AXI_ACP, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_ACP == 1)
PARAMETER C_S_AXI_ACP_ID_WIDTH = 3, DT = INTEGER, BUS = S_AXI_ACP, ASSIGNMENT = OPTIONAL, RANGE = (1 : 3), ISVALID = (C_USE_S_AXI_ACP == 1)
PARAMETER C_S_AXI_ACP_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI_ACP, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_ACP == 1)
PARAMETER C_S_AXI_ACP_DATA_WIDTH = 64, DT = INTEGER, BUS = S_AXI_ACP, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_ACP == 1)
PARAMETER C_S_AXI_ACP_SUPPORTS_USER_SIGNALS = 1, DT = INTEGER, BUS = S_AXI_ACP, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ACP_ARUSER_WIDTH = 5, DT = INTEGER, BUS = S_AXI_ACP, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ACP_AWUSER_WIDTH = 5, DT = INTEGER, BUS = S_AXI_ACP, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
PARAMETER C_INTERCONNECT_S_AXI_ACP_WRITE_ACCEPTANCE = 8, BUS = S_AXI_ACP, DT = INTEGER, RANGE = (1:8), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_INTERCONNECT_S_AXI_ACP_READ_ACCEPTANCE = 8, BUS = S_AXI_ACP, DT = INTEGER, RANGE = (1:8), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_S_AXI_HP0_PROTOCOL = AXI3, DT = STRING, BUS = S_AXI_HP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP0 == 1)
PARAMETER C_S_AXI_HP0_ID_WIDTH = 6, DT = INTEGER, BUS = S_AXI_HP0, ASSIGNMENT = OPTIONAL, RANGE = (1 : 6), ISVALID = (C_USE_S_AXI_HP0 == 1)
PARAMETER C_S_AXI_HP0_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI_HP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP0 == 1)
PARAMETER C_S_AXI_HP0_DATA_WIDTH = 64, DT = INTEGER, BUS = S_AXI_HP0, RANGE = (32,64), ISVALID = (C_USE_S_AXI_HP0 == 1)
PARAMETER C_INTERCONNECT_S_AXI_HP0_WRITE_ACCEPTANCE = 8, BUS = S_AXI_HP0, DT = INTEGER, RANGE = (1:8), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_INTERCONNECT_S_AXI_HP0_READ_ACCEPTANCE = 8, BUS = S_AXI_HP0, DT = INTEGER, RANGE = (1:8), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_S_AXI_HP1_PROTOCOL = AXI3, DT = STRING, BUS = S_AXI_HP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP1 == 1)
PARAMETER C_S_AXI_HP1_ID_WIDTH = 6, DT = INTEGER, BUS = S_AXI_HP1, ASSIGNMENT = OPTIONAL, RANGE = (1 : 6), ISVALID = (C_USE_S_AXI_HP1 == 1)
PARAMETER C_S_AXI_HP1_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI_HP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP1 == 1)
PARAMETER C_S_AXI_HP1_DATA_WIDTH = 64, DT = INTEGER, BUS = S_AXI_HP1, RANGE = (32,64), ISVALID = (C_USE_S_AXI_HP1 == 1)
PARAMETER C_INTERCONNECT_S_AXI_HP1_WRITE_ACCEPTANCE = 8, BUS = S_AXI_HP1, DT = INTEGER, RANGE = (1:8), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_INTERCONNECT_S_AXI_HP1_READ_ACCEPTANCE = 8, BUS = S_AXI_HP1, DT = INTEGER, RANGE = (1:8), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_S_AXI_HP2_PROTOCOL = AXI3, DT = STRING, BUS = S_AXI_HP2, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP2 == 1)
PARAMETER C_S_AXI_HP2_ID_WIDTH = 6, DT = INTEGER, BUS = S_AXI_HP2, ASSIGNMENT = OPTIONAL, RANGE = (1 : 6), ISVALID = (C_USE_S_AXI_HP2 == 1)
PARAMETER C_S_AXI_HP2_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI_HP2, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP2 == 1)
PARAMETER C_S_AXI_HP2_DATA_WIDTH = 64, DT = INTEGER, BUS = S_AXI_HP2, RANGE = (32,64), ISVALID = (C_USE_S_AXI_HP2 == 1)
PARAMETER C_INTERCONNECT_S_AXI_HP2_WRITE_ACCEPTANCE = 8, BUS = S_AXI_HP2, DT = INTEGER, RANGE = (1:8), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_INTERCONNECT_S_AXI_HP2_READ_ACCEPTANCE = 8, BUS = S_AXI_HP2, DT = INTEGER, RANGE = (1:8), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_S_AXI_HP3_PROTOCOL = AXI3, DT = STRING, BUS = S_AXI_HP3, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP3 == 1)
PARAMETER C_S_AXI_HP3_ID_WIDTH = 6, DT = INTEGER, BUS = S_AXI_HP3, ASSIGNMENT = OPTIONAL, RANGE = (1 : 6), ISVALID = (C_USE_S_AXI_HP3 == 1)
PARAMETER C_S_AXI_HP3_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI_HP3, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP3 == 1)
PARAMETER C_S_AXI_HP3_DATA_WIDTH = 64, DT = INTEGER, BUS = S_AXI_HP3, RANGE = (32,64), ISVALID = (C_USE_S_AXI_HP3 == 1)
PARAMETER C_INTERCONNECT_S_AXI_HP3_WRITE_ACCEPTANCE = 8, BUS = S_AXI_HP3, DT = INTEGER, RANGE = (1:8), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_INTERCONNECT_S_AXI_HP3_READ_ACCEPTANCE = 8, BUS = S_AXI_HP3, DT = INTEGER, RANGE = (1:8), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_S_AXI_GP0_BASEADDR = 0xE0000000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_GP0_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_GP0 == 1)
PARAMETER C_S_AXI_GP0_HIGHADDR = 0xFFFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_GP0_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_GP0 == 1)
PARAMETER C_S_AXI_GP0_LOWOCM_DDR_BASEADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_GP0_LOWOCM_DDR_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_S_AXI_GP0 == 1 && C_S_AXI_GP0_ENABLE_LOWOCM_DDR == 1)
PARAMETER C_S_AXI_GP0_LOWOCM_DDR_HIGHADDR = 0x3FFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_GP0_LOWOCM_DDR_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_GP0, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_S_AXI_GP0 == 1 && C_S_AXI_GP0_ENABLE_LOWOCM_DDR == 1)
PARAMETER C_S_AXI_GP1_BASEADDR = 0xE0000000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_GP1_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_GP1 == 1)
PARAMETER C_S_AXI_GP1_HIGHADDR = 0xFFFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_GP1_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_GP1 == 1)
PARAMETER C_S_AXI_GP1_LOWOCM_DDR_BASEADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_GP1_LOWOCM_DDR_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_S_AXI_GP1 == 1 && C_S_AXI_GP1_ENABLE_LOWOCM_DDR == 1)
PARAMETER C_S_AXI_GP1_LOWOCM_DDR_HIGHADDR = 0x3FFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_GP1_LOWOCM_DDR_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_GP1, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_S_AXI_GP1 == 1 && C_S_AXI_GP1_ENABLE_LOWOCM_DDR == 1)
PARAMETER C_S_AXI_ACP_BASEADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_ACP_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_ACP, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_S_AXI_ACP == 1)
PARAMETER C_S_AXI_ACP_HIGHADDR = 0x3FFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_ACP_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_ACP, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_S_AXI_ACP == 1)
PARAMETER C_S_AXI_ACP_HIGHOCM_BASEADDR = 0xFFFC0000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_ACP_HIGHOCM_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_ACP, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_ACP == 1 && C_S_AXI_ACP_ENABLE_HIGHOCM == 1)
PARAMETER C_S_AXI_ACP_HIGHOCM_HIGHADDR = 0xFFFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_ACP_HIGHOCM_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_ACP, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_ACP == 1 && C_S_AXI_ACP_ENABLE_HIGHOCM == 1)
PARAMETER C_S_AXI_HP0_BASEADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP0_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_HP0, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_S_AXI_HP0 == 1 && C_EN_DDR == 1)
PARAMETER C_S_AXI_HP0_HIGHADDR = 0x3FFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP0_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_HP0, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_for_hp_ports, ISVALID = (C_USE_S_AXI_HP0 == 1 && C_EN_DDR == 1)
PARAMETER C_S_AXI_HP0_HIGHOCM_BASEADDR = 0xFFFC0000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP0_HIGHOCM_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_HP0, CACHEABLE = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP0 == 1 && C_S_AXI_HP0_ENABLE_HIGHOCM == 1)
PARAMETER C_S_AXI_HP0_HIGHOCM_HIGHADDR = 0xFFFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP0_HIGHOCM_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_HP0, CACHEABLE = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP0 == 1 && C_S_AXI_HP0_ENABLE_HIGHOCM == 1)
PARAMETER C_S_AXI_HP1_BASEADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP1_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_HP1, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_S_AXI_HP1 == 1 && C_EN_DDR == 1)
PARAMETER C_S_AXI_HP1_HIGHADDR = 0x3FFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP1_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_HP1, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_for_hp_ports, ISVALID = (C_USE_S_AXI_HP1 == 1 && C_EN_DDR == 1)
PARAMETER C_S_AXI_HP1_HIGHOCM_BASEADDR = 0xFFFC0000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP1_HIGHOCM_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_HP1, CACHEABLE = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP1 == 1 && C_S_AXI_HP1_ENABLE_HIGHOCM == 1)
PARAMETER C_S_AXI_HP1_HIGHOCM_HIGHADDR = 0xFFFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP1_HIGHOCM_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_HP1, CACHEABLE = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP1 == 1 && C_S_AXI_HP1_ENABLE_HIGHOCM == 1)
PARAMETER C_S_AXI_HP2_BASEADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP2_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_HP2, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_S_AXI_HP2 == 1 && C_EN_DDR == 1)
PARAMETER C_S_AXI_HP2_HIGHADDR = 0x3FFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP2_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_HP2, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_for_hp_ports, ISVALID = (C_USE_S_AXI_HP2 == 1 && C_EN_DDR == 1)
PARAMETER C_S_AXI_HP2_HIGHOCM_BASEADDR = 0xFFFC0000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP2_HIGHOCM_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_HP2, CACHEABLE = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP2 == 1 && C_S_AXI_HP2_ENABLE_HIGHOCM == 1)
PARAMETER C_S_AXI_HP2_HIGHOCM_HIGHADDR = 0xFFFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP2_HIGHOCM_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_HP2, CACHEABLE = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP2 == 1 && C_S_AXI_HP2_ENABLE_HIGHOCM == 1)
PARAMETER C_S_AXI_HP3_BASEADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP3_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_HP3, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = (C_USE_S_AXI_HP3 == 1 && C_EN_DDR == 1)
PARAMETER C_S_AXI_HP3_HIGHADDR = 0x3FFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP3_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_HP3, TYPE = NON_HDL, CACHEABLE = TRUE, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_for_hp_ports, ISVALID = (C_USE_S_AXI_HP3 == 1 && C_EN_DDR == 1)
PARAMETER C_S_AXI_HP3_HIGHOCM_BASEADDR = 0xFFFC0000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP3_HIGHOCM_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_HP3, CACHEABLE = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP3 == 1 && C_S_AXI_HP3_ENABLE_HIGHOCM == 1)
PARAMETER C_S_AXI_HP3_HIGHOCM_HIGHADDR = 0xFFFFFFFF, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HP3_HIGHOCM_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_HP3, CACHEABLE = TRUE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_USE_S_AXI_HP3 == 1 && C_S_AXI_HP3_ENABLE_HIGHOCM == 1)
PARAMETER C_M_AXI_GP0_SUPPORTS_THREADS = 1, DT = INTEGER, BUS = M_AXI_GP0, ASSIGNMENT = OPTIONAL, RANGE = (0,1), TYPE = NON_HDL, ISVALID = (C_USE_S_AXI_GP0 == 1)
PARAMETER C_M_AXI_GP0_THREAD_ID_WIDTH = 12, BUS = M_AXI_GP0, ASSIGNMENT = UPDATE, ISVALID = (C_USE_S_AXI_GP0 == 1), IPLEVEL_UPDATE_VALUE_PROC = syslevel_update_thread_id0_num
PARAMETER C_M_AXI_GP1_SUPPORTS_THREADS = 1, DT = INTEGER, BUS = M_AXI_GP1, ASSIGNMENT = OPTIONAL, RANGE = (0,1), TYPE = NON_HDL, ISVALID = (C_USE_S_AXI_GP1 == 1)
PARAMETER C_M_AXI_GP1_THREAD_ID_WIDTH = 12, BUS = M_AXI_GP1, ASSIGNMENT = UPDATE, ISVALID = (C_USE_S_AXI_GP1 == 1), IPLEVEL_UPDATE_VALUE_PROC = syslevel_update_thread_id1_num
PARAMETER C_NUM_F2P_INTR_INPUTS = 2, DT = INTEGER, IPLEVEL_UPDATE_VALUE_PROC = syslevel_update_num_intr_inputs, RANGE = (1:16)
PARAMETER C_EN_DDR = 1, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_SMC = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_QSPI = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_CAN0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_CAN1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_ENET0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_ENET1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_GPIO = 1, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_I2C0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_I2C1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_PJTAG = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_SDIO0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_SDIO1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_SPI0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_SPI1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_UART0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_UART1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_MODEM_UART0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_MODEM_UART1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_TTC0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_TTC1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_WDT = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_TRACE = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_USB0 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_USB1 = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_EN_4K_TIMER = 0, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, RANGE = (0,1)
PARAMETER C_FCLK_CLK0_FREQ = 0, DT = INTEGER, TYPE = NON_HDL, ISVALID = (C_FCLK_CLK0_FREQ > 0)
PARAMETER C_FCLK_CLK1_FREQ = 0, DT = INTEGER, TYPE = NON_HDL, ISVALID = (C_FCLK_CLK1_FREQ > 0)
PARAMETER C_FCLK_CLK2_FREQ = 0, DT = INTEGER, TYPE = NON_HDL, ISVALID = (C_FCLK_CLK2_FREQ > 0)
PARAMETER C_FCLK_CLK3_FREQ = 0, DT = INTEGER, TYPE = NON_HDL, ISVALID = (C_FCLK_CLK3_FREQ > 0)
PARAMETER C_FCLK_CLK0_BUF = TRUE, DT = STRING, VALUES = (FALSE=FALSE, TRUE=TRUE), ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_use_fclkbuff, ISVALID = (C_FCLK_CLK0_FREQ > 0)
PARAMETER C_FCLK_CLK1_BUF = TRUE, DT = STRING, VALUES = (FALSE=FALSE, TRUE=TRUE), ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_use_fclkbuff, ISVALID = (C_FCLK_CLK1_FREQ > 0)
PARAMETER C_FCLK_CLK2_BUF = TRUE, DT = STRING, VALUES = (FALSE=FALSE, TRUE=TRUE), ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_use_fclkbuff, ISVALID = (C_FCLK_CLK2_FREQ > 0)
PARAMETER C_FCLK_CLK3_BUF = TRUE, DT = STRING, VALUES = (FALSE=FALSE, TRUE=TRUE), ASSIGNMENT = OPTIONAL_UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_use_fclkbuff, ISVALID = (C_FCLK_CLK3_FREQ > 0)

## Ports
PORT CAN0_PHY_TX = "", DIR = O, IO_IF = CAN_0, ISVALID = (C_EN_EMIO_CAN0 == 1)
PORT CAN0_PHY_RX = "", DIR = I, IO_IF = CAN_0, ISVALID = (C_EN_EMIO_CAN0 == 1)
PORT CAN1_PHY_TX = "", DIR = O, IO_IF = CAN_1, ISVALID = (C_EN_EMIO_CAN1 == 1)
PORT CAN1_PHY_RX = "", DIR = I, IO_IF = CAN_1, ISVALID = (C_EN_EMIO_CAN1 == 1)
PORT ENET0_GMII_TX_EN = "", DIR = O, IO_IF = ETHERNETIF_0, IO_IS = GMII_TX_EN, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_GMII_TX_ER = "", DIR = O, IO_IF = ETHERNETIF_0, IO_IS = GMII_TX_ER, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_MDIO_MDC = "", DIR = O, IO_IF = ETHERNETIF_0, IO_IS = MDC, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_MDIO_O = "", DIR = O, IO_IF = ETHERNETIF_0, IO_IS = MDIO_O, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_MDIO_T = "", DIR = O, IO_IF = ETHERNETIF_0, IO_IS = MDIO_T, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_PTP_DELAY_REQ_RX = "", DIR = O, IO_IF = ETHERNETIF_0, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_PTP_DELAY_REQ_TX = "", DIR = O, IO_IF = ETHERNETIF_0, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_PTP_PDELAY_REQ_RX = "", DIR = O, IO_IF = ETHERNETIF_0, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_PTP_PDELAY_REQ_TX = "", DIR = O, IO_IF = ETHERNETIF_0, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_PTP_PDELAY_RESP_RX = "", DIR = O, IO_IF = ETHERNETIF_0, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_PTP_PDELAY_RESP_TX = "", DIR = O, IO_IF = ETHERNETIF_0, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_PTP_SYNC_FRAME_RX = "", DIR = O, IO_IF = ETHERNETIF_0, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_PTP_SYNC_FRAME_TX = "", DIR = O, IO_IF = ETHERNETIF_0, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_SOF_RX = "", DIR = O, IO_IF = ETHERNETIF_0, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_SOF_TX = "", DIR = O, IO_IF = ETHERNETIF_0, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_GMII_TXD = "", DIR = O, VEC = [7:0], IO_IF = ETHERNETIF_0, IO_IS = GMII_TXD, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_GMII_COL = "", DIR = I, IO_IF = ETHERNETIF_0, IO_IS = GMII_COL, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_GMII_CRS = "", DIR = I, IO_IF = ETHERNETIF_0, IO_IS = GMII_CRS, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_EXT_INTIN = "", DIR = I, IO_IF = ETHERNETIF_0, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_GMII_RX_CLK = "", DIR = I, SIGIS = CLK, IO_IF = ETHERNETIF_0, IO_IS = GMII_RX_CLK, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_GMII_RX_DV = "", DIR = I, IO_IF = ETHERNETIF_0, IO_IS = GMII_RX_DV, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_GMII_RX_ER = "", DIR = I, IO_IF = ETHERNETIF_0, IO_IS = GMII_RX_ER, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_GMII_TX_CLK = "", DIR = I, SIGIS = CLK, IO_IF = ETHERNETIF_0, IO_IS = GMII_TX_CLK, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_MDIO_I = "", DIR = I, IO_IF = ETHERNETIF_0, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET0_GMII_RXD = "", DIR = I, VEC = [7:0], IO_IF = ETHERNETIF_0, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET1_GMII_TX_EN = "", DIR = O, IO_IF = ETHERNETIF_1, IO_IS = GMII_TX_EN, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_GMII_TX_ER = "", DIR = O, IO_IF = ETHERNETIF_1, IO_IS = GMII_TX_ER, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_MDIO_MDC = "", DIR = O, IO_IF = ETHERNETIF_1, IO_IS = MDC, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_MDIO_O = "", DIR = O, IO_IF = ETHERNETIF_1, IO_IS = MDIO_O, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_MDIO_T = "", DIR = O, IO_IF = ETHERNETIF_1, IO_IS = MDIO_T, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_PTP_DELAY_REQ_RX = "", DIR = O, IO_IF = ETHERNETIF_1, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_PTP_DELAY_REQ_TX = "", DIR = O, IO_IF = ETHERNETIF_1, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_PTP_PDELAY_REQ_RX = "", DIR = O, IO_IF = ETHERNETIF_1, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_PTP_PDELAY_REQ_TX = "", DIR = O, IO_IF = ETHERNETIF_1, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_PTP_PDELAY_RESP_RX = "", DIR = O, IO_IF = ETHERNETIF_1, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_PTP_PDELAY_RESP_TX = "", DIR = O, IO_IF = ETHERNETIF_1, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_PTP_SYNC_FRAME_RX = "", DIR = O, IO_IF = ETHERNETIF_1, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_PTP_SYNC_FRAME_TX = "", DIR = O, IO_IF = ETHERNETIF_1, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_SOF_RX = "", DIR = O, IO_IF = ETHERNETIF_1, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_SOF_TX = "", DIR = O, IO_IF = ETHERNETIF_1, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_GMII_TXD = "", DIR = O, VEC = [7:0], IO_IF = ETHERNETIF_1, IO_IS = GMII_TXD, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_GMII_COL = "", DIR = I, IO_IF = ETHERNETIF_1, IO_IS = GMII_COL, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_GMII_CRS = "", DIR = I, IO_IF = ETHERNETIF_1, IO_IS = GMII_CRS, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_EXT_INTIN = "", DIR = I, IO_IF = ETHERNETIF_1, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_GMII_RX_CLK = "", DIR = I, SIGIS = CLK, IO_IF = ETHERNETIF_1, IO_IS = GMII_RX_CLK, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_GMII_RX_DV = "", DIR = I, IO_IF = ETHERNETIF_1, IO_IS = GMII_RX_DV, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_GMII_RX_ER = "", DIR = I, IO_IF = ETHERNETIF_1, IO_IS = GMII_RX_ER, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_GMII_TX_CLK = "", DIR = I, SIGIS = CLK, IO_IF = ETHERNETIF_1, IO_IS = GMII_TX_CLK, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_MDIO_I = "", DIR = I, IO_IF = ETHERNETIF_1, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT ENET1_GMII_RXD = "", DIR = I, VEC = [7:0], IO_IF = ETHERNETIF_1, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT GPIO_I = "", DIR = I, VEC = [(C_EMIO_GPIO_WIDTH-1):0], IO_IF = GPIO_0, ISVALID = (C_EN_EMIO_GPIO == 1)
PORT GPIO_O = "", DIR = O, VEC = [(C_EMIO_GPIO_WIDTH-1):0], IO_IF = GPIO_0, ISVALID = (C_EN_EMIO_GPIO == 1)
PORT GPIO_T = "", DIR = O, VEC = [(C_EMIO_GPIO_WIDTH-1):0], IO_IF = GPIO_0, ISVALID = (C_EN_EMIO_GPIO == 1)
PORT I2C0_SDA_I = "", DIR = I, IO_IF = IIC_0, IO_IS = Serial_Data_I, ISVALID = (C_EN_EMIO_I2C0 == 1)
PORT I2C0_SDA_O = "", DIR = O, IO_IF = IIC_0, IO_IS = Serial_Data_O, ISVALID = (C_EN_EMIO_I2C0 == 1)
PORT I2C0_SDA_T = "", DIR = O, IO_IF = IIC_0, IO_IS = Serial_Data_T, ISVALID = (C_EN_EMIO_I2C0 == 1)
PORT I2C0_SCL_I = "", DIR = I, IO_IF = IIC_0, IO_IS = Serial_Clock_I, ISVALID = (C_EN_EMIO_I2C0 == 1)
PORT I2C0_SCL_O = "", DIR = O, IO_IF = IIC_0, IO_IS = Serial_Clock_O, ISVALID = (C_EN_EMIO_I2C0 == 1)
PORT I2C0_SCL_T = "", DIR = O, IO_IF = IIC_0, IO_IS = Serial_Clock_T, ISVALID = (C_EN_EMIO_I2C0 == 1)
PORT I2C1_SDA_I = "", DIR = I, IO_IF = IIC_1, IO_IS = Serial_Data_I, ISVALID = (C_EN_EMIO_I2C1 == 1)
PORT I2C1_SDA_O = "", DIR = O, IO_IF = IIC_1, IO_IS = Serial_Data_O, ISVALID = (C_EN_EMIO_I2C1 == 1)
PORT I2C1_SDA_T = "", DIR = O, IO_IF = IIC_1, IO_IS = Serial_Data_T, ISVALID = (C_EN_EMIO_I2C1 == 1)
PORT I2C1_SCL_I = "", DIR = I, IO_IF = IIC_1, IO_IS = Serial_Clock_I, ISVALID = (C_EN_EMIO_I2C1 == 1)
PORT I2C1_SCL_O = "", DIR = O, IO_IF = IIC_1, IO_IS = Serial_Clock_O, ISVALID = (C_EN_EMIO_I2C1 == 1)
PORT I2C1_SCL_T = "", DIR = O, IO_IF = IIC_1, IO_IS = Serial_Clock_T, ISVALID = (C_EN_EMIO_I2C1 == 1)
PORT PJTAG_TCK = "", DIR = I, IO_IF = PJTAG, ISVALID = (C_EN_EMIO_PJTAG == 1)
PORT PJTAG_TMS = "", DIR = I, IO_IF = PJTAG, ISVALID = (C_EN_EMIO_PJTAG == 1)
PORT PJTAG_TD_I = "", DIR = I, IO_IF = PJTAG, ISVALID = (C_EN_EMIO_PJTAG == 1)
PORT PJTAG_TD_T = "", DIR = O, IO_IF = PJTAG, ISVALID = (C_EN_EMIO_PJTAG == 1)
PORT PJTAG_TD_O = "", DIR = O, IO_IF = PJTAG, ISVALID = (C_EN_EMIO_PJTAG == 1)
PORT SDIO0_CLK = "", DIR = O, SIGIS = CLK, IO_IF = SDIO_0, ISVALID = (C_EN_EMIO_SDIO0 == 1)
PORT SDIO0_CLK_FB = "", DIR = I, SIGIS = CLK, IO_IF = SDIO_0, ISVALID = (C_EN_EMIO_SDIO0 == 1)
PORT SDIO0_CMD_O = "", DIR = O, IO_IF = SDIO_0, ISVALID = (C_EN_EMIO_SDIO0 == 1)
PORT SDIO0_CMD_I = "", DIR = I, IO_IF = SDIO_0, ISVALID = (C_EN_EMIO_SDIO0 == 1)
PORT SDIO0_CMD_T = "", DIR = O, IO_IF = SDIO_0, ISVALID = (C_EN_EMIO_SDIO0 == 1)
PORT SDIO0_DATA_I = "", DIR = I, VEC = [3:0], IO_IF = SDIO_0, ISVALID = (C_EN_EMIO_SDIO0 == 1)
PORT SDIO0_DATA_O = "", DIR = O, VEC = [3:0], IO_IF = SDIO_0, ISVALID = (C_EN_EMIO_SDIO0 == 1)
PORT SDIO0_DATA_T = "", DIR = O, VEC = [3:0], IO_IF = SDIO_0, ISVALID = (C_EN_EMIO_SDIO0 == 1)
PORT SDIO0_LED = "", DIR = O, IO_IF = SDIO_0, ISVALID = (C_EN_EMIO_SDIO0 == 1)
PORT SDIO0_CDN = "", DIR = I, IO_IF = SDIO_0, ISVALID = (C_EN_EMIO_CD_SDIO0 == 1)
PORT SDIO0_WP = "", DIR = I, IO_IF = SDIO_0, ISVALID = (C_EN_EMIO_WP_SDIO0== 1)
PORT SDIO0_BUSPOW = "", DIR = O, IO_IF = SDIO_0, ISVALID = (C_EN_EMIO_SDIO0 == 1)
PORT SDIO0_BUSVOLT = "", DIR = O, VEC = [2:0], IO_IF = SDIO_0, ISVALID = (C_EN_EMIO_SDIO0 == 1)
PORT SDIO1_CLK = "", DIR = O, SIGIS = CLK, IO_IF = SDIO_1, ISVALID = (C_EN_EMIO_SDIO1 == 1)
PORT SDIO1_CLK_FB = "", DIR = I, SIGIS = CLK, IO_IF = SDIO_1, ISVALID = (C_EN_EMIO_SDIO1 == 1)
PORT SDIO1_CMD_O = "", DIR = O, IO_IF = SDIO_1, ISVALID = (C_EN_EMIO_SDIO1 == 1)
PORT SDIO1_CMD_I = "", DIR = I, IO_IF = SDIO_1, ISVALID = (C_EN_EMIO_SDIO1 == 1)
PORT SDIO1_CMD_T = "", DIR = O, IO_IF = SDIO_1, ISVALID = (C_EN_EMIO_SDIO1 == 1)
PORT SDIO1_DATA_I = "", DIR = I, VEC = [3:0], IO_IF = SDIO_1, ISVALID = (C_EN_EMIO_SDIO1 == 1)
PORT SDIO1_DATA_O = "", DIR = O, VEC = [3:0], IO_IF = SDIO_1, ISVALID = (C_EN_EMIO_SDIO1 == 1)
PORT SDIO1_DATA_T = "", DIR = O, VEC = [3:0], IO_IF = SDIO_1, ISVALID = (C_EN_EMIO_SDIO1 == 1)
PORT SDIO1_LED = "", DIR = O, IO_IF = SDIO_1, ISVALID = (C_EN_EMIO_SDIO1 == 1)
PORT SDIO1_CDN = "", DIR = I, IO_IF = SDIO_1, ISVALID = (C_EN_EMIO_CD_SDIO1 == 1)
PORT SDIO1_WP = "", DIR = I, IO_IF = SDIO_1, ISVALID = (C_EN_EMIO_WP_SDIO1 == 1)
PORT SDIO1_BUSPOW = "", DIR = O, IO_IF = SDIO_1, ISVALID = (C_EN_EMIO_SDIO1 == 1)
PORT SDIO1_BUSVOLT = "", DIR = O, VEC = [2:0], IO_IF = SDIO_1, ISVALID = (C_EN_EMIO_SDIO1 == 1)
PORT SPI0_SCLK_I = "", DIR = I, SIGIS = CLK, IO_IF = SPI_0, ISVALID = (C_EN_EMIO_SPI0 == 1)
PORT SPI0_SCLK_O = "", DIR = O, SIGIS = CLK, IO_IF = SPI_0, ISVALID = (C_EN_EMIO_SPI0 == 1)
PORT SPI0_SCLK_T = "", DIR = O, SIGIS = CLK, IO_IF = SPI_0, ISVALID = (C_EN_EMIO_SPI0 == 1)
PORT SPI0_MOSI_I = "", DIR = I, IO_IF = SPI_0, ISVALID = (C_EN_EMIO_SPI0 == 1)
PORT SPI0_MOSI_O = "", DIR = O, IO_IF = SPI_0, ISVALID = (C_EN_EMIO_SPI0 == 1)
PORT SPI0_MOSI_T = "", DIR = O, IO_IF = SPI_0, ISVALID = (C_EN_EMIO_SPI0 == 1)
PORT SPI0_MISO_I = "", DIR = I, IO_IF = SPI_0, ISVALID = (C_EN_EMIO_SPI0 == 1)
PORT SPI0_MISO_O = "", DIR = O, IO_IF = SPI_0, ISVALID = (C_EN_EMIO_SPI0 == 1)
PORT SPI0_MISO_T = "", DIR = O, IO_IF = SPI_0, ISVALID = (C_EN_EMIO_SPI0 == 1)
PORT SPI0_SS_I = "", DIR = I, IO_IF = SPI_0, ISVALID = (C_EN_EMIO_SPI0 == 1)
PORT SPI0_SS_O = "", DIR = O, IO_IF = SPI_0, ISVALID = (C_EN_EMIO_SPI0 == 1)
PORT SPI0_SS1_O = "", DIR = O, IO_IF = SPI_0, ISVALID = (C_EN_EMIO_SPI0 == 1)
PORT SPI0_SS2_O = "", DIR = O, IO_IF = SPI_0, ISVALID = (C_EN_EMIO_SPI0 == 1)
PORT SPI0_SS_T = "", DIR = O, IO_IF = SPI_0, ISVALID = (C_EN_EMIO_SPI0 == 1)
PORT SPI1_SCLK_I = "", DIR = I, SIGIS = CLK, IO_IF = SPI_1, ISVALID = (C_EN_EMIO_SPI1 == 1)
PORT SPI1_SCLK_O = "", DIR = O, SIGIS = CLK, IO_IF = SPI_1, ISVALID = (C_EN_EMIO_SPI1 == 1)
PORT SPI1_SCLK_T = "", DIR = O, SIGIS = CLK, IO_IF = SPI_1, ISVALID = (C_EN_EMIO_SPI1 == 1)
PORT SPI1_MOSI_I = "", DIR = I, IO_IF = SPI_1, ISVALID = (C_EN_EMIO_SPI1 == 1)
PORT SPI1_MOSI_O = "", DIR = O, IO_IF = SPI_1, ISVALID = (C_EN_EMIO_SPI1 == 1)
PORT SPI1_MOSI_T = "", DIR = O, IO_IF = SPI_1, ISVALID = (C_EN_EMIO_SPI1 == 1)
PORT SPI1_MISO_I = "", DIR = I, IO_IF = SPI_1, ISVALID = (C_EN_EMIO_SPI1 == 1)
PORT SPI1_MISO_O = "", DIR = O, IO_IF = SPI_1, ISVALID = (C_EN_EMIO_SPI1 == 1)
PORT SPI1_MISO_T = "", DIR = O, IO_IF = SPI_1, ISVALID = (C_EN_EMIO_SPI1 == 1)
PORT SPI1_SS_I = "", DIR = I, IO_IF = SPI_1, ISVALID = (C_EN_EMIO_SPI1 == 1)
PORT SPI1_SS_O = "", DIR = O, IO_IF = SPI_1, ISVALID = (C_EN_EMIO_SPI1 == 1)
PORT SPI1_SS1_O = "", DIR = O, IO_IF = SPI_1, ISVALID = (C_EN_EMIO_SPI1 == 1)
PORT SPI1_SS2_O = "", DIR = O, IO_IF = SPI_1, ISVALID = (C_EN_EMIO_SPI1 == 1)
PORT SPI1_SS_T = "", DIR = O, IO_IF = SPI_1, ISVALID = (C_EN_EMIO_SPI1 == 1)
PORT UART0_DTRN = "", DIR = O, ISVALID = (C_EN_EMIO_MODEM_UART0 == 1), IO_IF = UART_0, IO_IS = data_terminal_ready
PORT UART0_RTSN = "", DIR = O, ISVALID = (C_EN_EMIO_MODEM_UART0 == 1), IO_IF = UART_0, IO_IS = req_to_send
PORT UART0_TX = "", DIR = O, ISVALID = (C_EN_EMIO_UART0 == 1), IO_IF = UART_0, IO_IS = serial_out
PORT UART0_CTSN = "", DIR = I, ISVALID = (C_EN_EMIO_MODEM_UART0 == 1), IO_IF = UART_0, IO_IS = clear_to_send
PORT UART0_DCDN = "", DIR = I, ISVALID = (C_EN_EMIO_MODEM_UART0 == 1), IO_IF = UART_0, IO_IS = data_carrier_detect
PORT UART0_DSRN = "", DIR = I, ISVALID = (C_EN_EMIO_MODEM_UART0 == 1), IO_IF = UART_0, IO_IS = data_set_ready
PORT UART0_RIN = "", DIR = I, ISVALID = (C_EN_EMIO_MODEM_UART0 == 1), IO_IF = UART_0, IO_IS = ring_indicator
PORT UART0_RX = "", DIR = I, ISVALID = (C_EN_EMIO_UART0 == 1), IO_IF = UART_0, IO_IS = serial_in
PORT UART1_DTRN = "", DIR = O, ISVALID = (C_EN_EMIO_MODEM_UART1 == 1), IO_IF = UART_1, IO_IS = data_terminal_ready
PORT UART1_RTSN = "", DIR = O, ISVALID = (C_EN_EMIO_MODEM_UART1 == 1), IO_IF = UART_1, IO_IS = req_to_send
PORT UART1_TX = "", DIR = O, ISVALID = (C_EN_EMIO_UART1 == 1), IO_IF = UART_1, IO_IS = serial_out
PORT UART1_CTSN = "", DIR = I, ISVALID = (C_EN_EMIO_MODEM_UART1 == 1), IO_IF = UART_1, IO_IS = clear_to_send
PORT UART1_DCDN = "", DIR = I, ISVALID = (C_EN_EMIO_MODEM_UART1 == 1), IO_IF = UART_1, IO_IS = data_carrier_detect
PORT UART1_DSRN = "", DIR = I, ISVALID = (C_EN_EMIO_MODEM_UART1 == 1), IO_IF = UART_1, IO_IS = data_set_ready
PORT UART1_RIN = "", DIR = I, ISVALID = (C_EN_EMIO_MODEM_UART1 == 1), IO_IF = UART_1, IO_IS = ring_indicator
PORT UART1_RX = "", DIR = I, ISVALID = (C_EN_EMIO_UART1 == 1), IO_IF = UART_1, IO_IS = serial_in
PORT TTC0_WAVE0_OUT = "", DIR = O, ISVALID = (C_EN_EMIO_TTC0 == 1 && C_EN_TTC0 == 1), IO_IF = TTC_0
PORT TTC0_WAVE1_OUT = "", DIR = O, ISVALID = (C_EN_TTC0 == 1), IO_IF = TTC_0
PORT TTC0_WAVE2_OUT = "", DIR = O, ISVALID = (C_EN_TTC0 == 1), IO_IF = TTC_0
PORT TTC0_CLK0_IN = "", DIR = I, SIGIS = CLK, ISVALID = (C_EN_EMIO_TTC0 == 1 && C_EN_TTC0 == 1), IO_IF = TTC_0
PORT TTC0_CLK1_IN = "", DIR = I, SIGIS = CLK, ISVALID = (C_EN_TTC0 == 1), IO_IF = TTC_0
PORT TTC0_CLK2_IN = "", DIR = I, SIGIS = CLK, ISVALID = (C_EN_TTC0 == 1), IO_IF = TTC_0
PORT TTC1_WAVE0_OUT = "", DIR = O, ISVALID = (C_EN_EMIO_TTC1 == 1 && C_EN_TTC1 == 1), IO_IF = TTC_1
PORT TTC1_WAVE1_OUT = "", DIR = O, ISVALID = (C_EN_TTC1 == 1), IO_IF = TTC_1
PORT TTC1_WAVE2_OUT = "", DIR = O, ISVALID = (C_EN_TTC1 == 1), IO_IF = TTC_1
PORT TTC1_CLK0_IN = "", DIR = I, SIGIS = CLK, ISVALID = (C_EN_EMIO_TTC1 == 1 && C_EN_TTC1 == 1), IO_IF = TTC_1
PORT TTC1_CLK1_IN = "", DIR = I, SIGIS = CLK, ISVALID = (C_EN_TTC1 == 1), IO_IF = TTC_1
PORT TTC1_CLK2_IN = "", DIR = I, SIGIS = CLK, ISVALID = (C_EN_TTC1 == 1), IO_IF = TTC_1
PORT WDT_CLK_IN = "", DIR = I, SIGIS = CLK, ISVALID = (C_EN_EMIO_WDT == 1), IO_IF = WDT_0
PORT WDT_RST_OUT = "", DIR = O, ISVALID = (C_EN_EMIO_WDT == 1), IO_IF = WDT_0
PORT TRACE_CLK = "", DIR = I, SIGIS = CLK, ISVALID = (C_EN_EMIO_TRACE == 1), IO_IF = TRACE_0
PORT TRACE_CTL = "", DIR = O, ISVALID = (C_EN_EMIO_TRACE == 1), IO_IF = TRACE_0
PORT TRACE_DATA = "", DIR = O, VEC = [31:0], ISVALID = (C_EN_EMIO_TRACE == 1), IO_IF = TRACE_0
PORT USB0_PORT_INDCTL = "", DIR = O, VEC = [1:0], ISVALID = (C_EN_USB0 == 1), IO_IF = USBIND_0
PORT USB1_PORT_INDCTL = "", DIR = O, VEC = [1:0], ISVALID = (C_EN_USB1 == 1), IO_IF = USBIND_1
PORT USB0_VBUS_PWRSELECT = "", DIR = O, ISVALID = (C_EN_USB0 == 1), IO_IF = USBIND_0
PORT USB1_VBUS_PWRSELECT = "", DIR = O, ISVALID = (C_EN_USB1 == 1), IO_IF = USBIND_1
PORT USB0_VBUS_PWRFAULT = "", DIR = I, ISVALID = (C_EN_USB0 == 1), IO_IF = USBIND_0
PORT USB1_VBUS_PWRFAULT = "", DIR = I, ISVALID = (C_EN_USB1 == 1), IO_IF = USBIND_1
PORT SRAM_INTIN = "", DIR = I, ISVALID = (C_EN_EMIO_SRAM_INT == 1)
PORT M_AXI_GP0_ARESETN = "", DIR = O, SIGIS = RST, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_ARVALID = ARVALID, DIR = O, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_AWVALID = AWVALID, DIR = O, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_BREADY = BREADY, DIR = O, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_RREADY = RREADY, DIR = O, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_WLAST = WLAST, DIR = O, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_WVALID = WVALID, DIR = O, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_ARID = ARID, DIR = O, VEC = [C_M_AXI_GP0_THREAD_ID_WIDTH-1:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_AWID = AWID, DIR = O, VEC = [C_M_AXI_GP0_THREAD_ID_WIDTH-1:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_WID = WID, DIR = O, VEC = [C_M_AXI_GP0_THREAD_ID_WIDTH-1:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_ARBURST = ARBURST, DIR = O, VEC = [1:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_ARLOCK = ARLOCK, DIR = O, VEC = [1:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_ARSIZE = ARSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_AWBURST = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_AWLOCK = AWLOCK, DIR = O, VEC = [1:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_AWSIZE = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_ARPROT = ARPROT, DIR = O, VEC = [2:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_AWPROT = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_ARADDR = ARADDR, DIR = O, VEC = [31:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_AWADDR = AWADDR, DIR = O, VEC = [31:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_WDATA = WDATA, DIR = O, VEC = [31:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_ARCACHE = ARCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_ARLEN = ARLEN, DIR = O, VEC = [3:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_ARQOS = ARQOS, DIR = O, VEC = [3:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_AWCACHE = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_AWLEN = AWLEN, DIR = O, VEC = [3:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_AWQOS = AWQOS, DIR = O, VEC = [3:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_WSTRB = WSTRB, DIR = O, VEC = [3:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_ACLK = "", DIR = I, BUS = M_AXI_GP0, SIGIS = CLK, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_ARREADY = ARREADY, DIR = I, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_AWREADY = AWREADY, DIR = I, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_BVALID = BVALID, DIR = I, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_RLAST = RLAST, DIR = I, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_RVALID = RVALID, DIR = I, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_WREADY = WREADY, DIR = I, BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_BID = BID, DIR = I, VEC = [C_M_AXI_GP0_THREAD_ID_WIDTH-1:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_RID = RID, DIR = I, VEC = [C_M_AXI_GP0_THREAD_ID_WIDTH-1:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_BRESP = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_RRESP = RRESP, DIR = I, VEC = [1:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP0_RDATA = RDATA, DIR = I, VEC = [31:0], BUS = M_AXI_GP0, ISVALID = (C_USE_M_AXI_GP0 == 1)
PORT M_AXI_GP1_ARESETN = "", DIR = O, SIGIS = RST, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_ARVALID = ARVALID, DIR = O, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_AWVALID = AWVALID, DIR = O, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_BREADY = BREADY, DIR = O, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_RREADY = RREADY, DIR = O, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_WLAST = WLAST, DIR = O, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_WVALID = WVALID, DIR = O, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_ARID = ARID, DIR = O, VEC = [C_M_AXI_GP1_THREAD_ID_WIDTH-1:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_AWID = AWID, DIR = O, VEC = [C_M_AXI_GP1_THREAD_ID_WIDTH-1:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_WID = WID, DIR = O, VEC = [C_M_AXI_GP1_THREAD_ID_WIDTH-1:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_ARBURST = ARBURST, DIR = O, VEC = [1:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_ARLOCK = ARLOCK, DIR = O, VEC = [1:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_ARSIZE = ARSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_AWBURST = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_AWLOCK = AWLOCK, DIR = O, VEC = [1:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_AWSIZE = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_ARPROT = ARPROT, DIR = O, VEC = [2:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_AWPROT = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_ARADDR = ARADDR, DIR = O, VEC = [31:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_AWADDR = AWADDR, DIR = O, VEC = [31:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_WDATA = WDATA, DIR = O, VEC = [31:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_ARCACHE = ARCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_ARLEN = ARLEN, DIR = O, VEC = [3:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_ARQOS = ARQOS, DIR = O, VEC = [3:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_AWCACHE = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_AWLEN = AWLEN, DIR = O, VEC = [3:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_AWQOS = AWQOS, DIR = O, VEC = [3:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_WSTRB = WSTRB, DIR = O, VEC = [3:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_ACLK = "", DIR = I, BUS = M_AXI_GP1, SIGIS = CLK, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_ARREADY = ARREADY, DIR = I, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_AWREADY = AWREADY, DIR = I, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_BVALID = BVALID, DIR = I, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_RLAST = RLAST, DIR = I, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_RVALID = RVALID, DIR = I, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_WREADY = WREADY, DIR = I, BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_BID = BID, DIR = I, VEC = [C_M_AXI_GP1_THREAD_ID_WIDTH-1:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_RID = RID, DIR = I, VEC = [C_M_AXI_GP1_THREAD_ID_WIDTH-1:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_BRESP = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_RRESP = RRESP, DIR = I, VEC = [1:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT M_AXI_GP1_RDATA = RDATA, DIR = I, VEC = [31:0], BUS = M_AXI_GP1, ISVALID = (C_USE_M_AXI_GP1 == 1)
PORT S_AXI_GP0_ARESETN = "", DIR = O, SIGIS = RST, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_ARREADY = ARREADY, DIR = O, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_AWREADY = AWREADY, DIR = O, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_BVALID = BVALID, DIR = O, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_RLAST = RLAST, DIR = O, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_RVALID = RVALID, DIR = O, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_WREADY = WREADY, DIR = O, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_RDATA = RDATA, DIR = O, VEC = [31:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_BID = BID, DIR = O, VEC = [(C_S_AXI_GP0_ID_WIDTH - 1) : 0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_RID = RID, DIR = O, VEC = [(C_S_AXI_GP0_ID_WIDTH - 1) : 0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_ACLK = "", DIR = I, BUS = S_AXI_GP0, SIGIS = CLK, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_ARVALID = ARVALID, DIR = I, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_AWVALID = AWVALID, DIR = I, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_BREADY = BREADY, DIR = I, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_RREADY = RREADY, DIR = I, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_WLAST = WLAST, DIR = I, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_WVALID = WVALID, DIR = I, BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_ARBURST = ARBURST, DIR = I, VEC = [1:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_ARLOCK = ARLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_ARSIZE = ARSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_AWBURST = AWBURST, DIR = I, VEC = [1:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_AWLOCK = AWLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_AWSIZE = AWSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_ARPROT = ARPROT, DIR = I, VEC = [2:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_AWPROT = AWPROT, DIR = I, VEC = [2:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_ARADDR = ARADDR, DIR = I, VEC = [31:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_AWADDR = AWADDR, DIR = I, VEC = [31:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_WDATA = WDATA, DIR = I, VEC = [31:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_ARCACHE = ARCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_ARLEN = ARLEN, DIR = I, VEC = [3:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_ARQOS = ARQOS, DIR = I, VEC = [3:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_AWCACHE = AWCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_AWLEN = AWLEN, DIR = I, VEC = [3:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_AWQOS = AWQOS, DIR = I, VEC = [3:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_WSTRB = WSTRB, DIR = I, VEC = [3:0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_ARID = ARID, DIR = I, VEC = [(C_S_AXI_GP0_ID_WIDTH - 1) : 0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_AWID = AWID, DIR = I, VEC = [(C_S_AXI_GP0_ID_WIDTH - 1) : 0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP0_WID = WID, DIR = I, VEC = [(C_S_AXI_GP0_ID_WIDTH - 1) : 0], BUS = S_AXI_GP0, ISVALID = (C_USE_S_AXI_GP0 == 1)
PORT S_AXI_GP1_ARESETN = "", DIR = O, SIGIS = RST, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_ARREADY = ARREADY, DIR = O, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_AWREADY = AWREADY, DIR = O, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_BVALID = BVALID, DIR = O, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_RLAST = RLAST, DIR = O, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_RVALID = RVALID, DIR = O, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_WREADY = WREADY, DIR = O, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_RDATA = RDATA, DIR = O, VEC = [31:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_BID = BID, DIR = O, VEC = [(C_S_AXI_GP1_ID_WIDTH - 1) : 0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_RID = RID, DIR = O, VEC = [(C_S_AXI_GP1_ID_WIDTH - 1) : 0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_ACLK = "", DIR = I, BUS = S_AXI_GP1, SIGIS = CLK, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_ARVALID = ARVALID, DIR = I, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_AWVALID = AWVALID, DIR = I, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_BREADY = BREADY, DIR = I, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_RREADY = RREADY, DIR = I, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_WLAST = WLAST, DIR = I, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_WVALID = WVALID, DIR = I, BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_ARBURST = ARBURST, DIR = I, VEC = [1:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_ARLOCK = ARLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_ARSIZE = ARSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_AWBURST = AWBURST, DIR = I, VEC = [1:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_AWLOCK = AWLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_AWSIZE = AWSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_ARPROT = ARPROT, DIR = I, VEC = [2:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_AWPROT = AWPROT, DIR = I, VEC = [2:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_ARADDR = ARADDR, DIR = I, VEC = [31:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_AWADDR = AWADDR, DIR = I, VEC = [31:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_WDATA = WDATA, DIR = I, VEC = [31:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_ARCACHE = ARCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_ARLEN = ARLEN, DIR = I, VEC = [3:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_ARQOS = ARQOS, DIR = I, VEC = [3:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_AWCACHE = AWCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_AWLEN = AWLEN, DIR = I, VEC = [3:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_AWQOS = AWQOS, DIR = I, VEC = [3:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_WSTRB = WSTRB, DIR = I, VEC = [3:0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_ARID = ARID, DIR = I, VEC = [(C_S_AXI_GP1_ID_WIDTH - 1) : 0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_AWID = AWID, DIR = I, VEC = [(C_S_AXI_GP1_ID_WIDTH - 1) : 0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_GP1_WID = WID, DIR = I, VEC = [(C_S_AXI_GP1_ID_WIDTH - 1) : 0], BUS = S_AXI_GP1, ISVALID = (C_USE_S_AXI_GP1 == 1)
PORT S_AXI_ACP_ARESETN = "", DIR = O, SIGIS = RST, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_AWREADY = AWREADY, DIR = O, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_ARREADY = ARREADY, DIR = O, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_BVALID = BVALID, DIR = O, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_RLAST = RLAST, DIR = O, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_RVALID = RVALID, DIR = O, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_WREADY = WREADY, DIR = O, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_BID = BID, DIR = O, VEC = [(C_S_AXI_ACP_ID_WIDTH - 1) : 0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_RID = RID, DIR = O, VEC = [(C_S_AXI_ACP_ID_WIDTH - 1) : 0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_RDATA = RDATA, DIR = O, VEC = [63:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_ACLK = "", DIR = I, BUS = S_AXI_ACP, SIGIS = CLK, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_ARVALID = ARVALID, DIR = I, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_AWVALID = AWVALID, DIR = I, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_BREADY = BREADY, DIR = I, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_RREADY = RREADY, DIR = I, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_WLAST = WLAST, DIR = I, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_WVALID = WVALID, DIR = I, BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_ARID = ARID, DIR = I, VEC = [(C_S_AXI_ACP_ID_WIDTH - 1) : 0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_ARPROT = ARPROT, DIR = I, VEC = [2:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_AWID = AWID, DIR = I, VEC = [(C_S_AXI_ACP_ID_WIDTH - 1) : 0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_AWPROT = AWPROT, DIR = I, VEC = [2:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_WID = WID, DIR = I, VEC = [(C_S_AXI_ACP_ID_WIDTH - 1) : 0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_ARADDR = ARADDR, DIR = I, VEC = [31:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_AWADDR = AWADDR, DIR = I, VEC = [31:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_ARCACHE = ARCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_ARLEN = ARLEN, DIR = I, VEC = [3:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_ARQOS = ARQOS, DIR = I, VEC = [3:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_AWCACHE = AWCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_AWLEN = AWLEN, DIR = I, VEC = [3:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_AWQOS = AWQOS, DIR = I, VEC = [3:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_ARBURST = ARBURST, DIR = I, VEC = [1:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_ARLOCK = ARLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_ARSIZE = ARSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_AWBURST = AWBURST, DIR = I, VEC = [1:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_AWLOCK = AWLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_AWSIZE = AWSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_ARUSER = ARUSER, DIR = I, VEC = [4:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_AWUSER = AWUSER, DIR = I, VEC = [4:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_WDATA = WDATA, DIR = I, VEC = [63:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_ACP_WSTRB = WSTRB, DIR = I, VEC = [7:0], BUS = S_AXI_ACP, ISVALID = (C_USE_S_AXI_ACP == 1)
PORT S_AXI_HP0_ARESETN = "", DIR = O, SIGIS = RST, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_ARREADY = ARREADY, DIR = O, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_AWREADY = AWREADY, DIR = O, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_BVALID = BVALID, DIR = O, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_RLAST = RLAST, DIR = O, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_RVALID = RVALID, DIR = O, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_WREADY = WREADY, DIR = O, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_BID = BID, DIR = O, VEC = [(C_S_AXI_HP0_ID_WIDTH - 1) : 0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_RID = RID, DIR = O, VEC = [(C_S_AXI_HP0_ID_WIDTH - 1) : 0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_HP0_DATA_WIDTH - 1) :0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_RCOUNT = "", DIR = O, VEC = [7:0], ISVALID = (C_USE_S_AXI_HP0 == 1), IO_IF = S_AXI_HP0_FIFO_CTRL
PORT S_AXI_HP0_WCOUNT = "", DIR = O, VEC = [7:0], ISVALID = (C_USE_S_AXI_HP0 == 1), IO_IF = S_AXI_HP0_FIFO_CTRL
PORT S_AXI_HP0_RACOUNT = "", DIR = O, VEC = [2:0], ISVALID = (C_USE_S_AXI_HP0 == 1), IO_IF = S_AXI_HP0_FIFO_CTRL
PORT S_AXI_HP0_WACOUNT = "", DIR = O, VEC = [5:0], ISVALID = (C_USE_S_AXI_HP0 == 1), IO_IF = S_AXI_HP0_FIFO_CTRL
PORT S_AXI_HP0_ACLK = "", DIR = I, BUS = S_AXI_HP0, SIGIS = CLK, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_ARVALID = ARVALID, DIR = I, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_AWVALID = AWVALID, DIR = I, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_BREADY = BREADY, DIR = I, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_RDISSUECAP1_EN = "", DIR = I, ISVALID = (C_USE_S_AXI_HP0 == 1), IO_IF = S_AXI_HP0_FIFO_CTRL
PORT S_AXI_HP0_RREADY = RREADY, DIR = I, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_WLAST = WLAST, DIR = I, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_WRISSUECAP1_EN = "", DIR = I, ISVALID = (C_USE_S_AXI_HP0 == 1), IO_IF = S_AXI_HP0_FIFO_CTRL
PORT S_AXI_HP0_WVALID = WVALID, DIR = I, BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_ARBURST = ARBURST, DIR = I, VEC = [1:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_ARLOCK = ARLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_ARSIZE = ARSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_AWBURST = AWBURST, DIR = I, VEC = [1:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_AWLOCK = AWLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_AWSIZE = AWSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_ARPROT = ARPROT, DIR = I, VEC = [2:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_AWPROT = AWPROT, DIR = I, VEC = [2:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_ARADDR = ARADDR, DIR = I, VEC = [31:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_AWADDR = AWADDR, DIR = I, VEC = [31:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_ARCACHE = ARCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_ARLEN = ARLEN, DIR = I, VEC = [3:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_ARQOS = ARQOS, DIR = I, VEC = [3:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_AWCACHE = AWCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_AWLEN = AWLEN, DIR = I, VEC = [3:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_AWQOS = AWQOS, DIR = I, VEC = [3:0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_ARID = ARID, DIR = I, VEC = [(C_S_AXI_HP0_ID_WIDTH - 1) : 0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_AWID = AWID, DIR = I, VEC = [(C_S_AXI_HP0_ID_WIDTH - 1) : 0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_WID = WID, DIR = I, VEC = [(C_S_AXI_HP0_ID_WIDTH - 1) : 0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_HP0_DATA_WIDTH - 1) :0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP0_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_HP0_DATA_WIDTH/8)-1):0], BUS = S_AXI_HP0, ISVALID = (C_USE_S_AXI_HP0 == 1)
PORT S_AXI_HP1_ARESETN = "", DIR = O, SIGIS = RST, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_ARREADY = ARREADY, DIR = O, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_AWREADY = AWREADY, DIR = O, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_BVALID = BVALID, DIR = O, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_RLAST = RLAST, DIR = O, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_RVALID = RVALID, DIR = O, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_WREADY = WREADY, DIR = O, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_BID = BID, DIR = O, VEC = [(C_S_AXI_HP1_ID_WIDTH - 1) : 0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_RID = RID, DIR = O, VEC = [(C_S_AXI_HP1_ID_WIDTH - 1) : 0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_HP1_DATA_WIDTH - 1) :0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_RCOUNT = "", DIR = O, VEC = [7:0], ISVALID = (C_USE_S_AXI_HP1 == 1), IO_IF = S_AXI_HP1_FIFO_CTRL
PORT S_AXI_HP1_WCOUNT = "", DIR = O, VEC = [7:0], ISVALID = (C_USE_S_AXI_HP1 == 1), IO_IF = S_AXI_HP1_FIFO_CTRL
PORT S_AXI_HP1_RACOUNT = "", DIR = O, VEC = [2:0], ISVALID = (C_USE_S_AXI_HP1 == 1), IO_IF = S_AXI_HP1_FIFO_CTRL
PORT S_AXI_HP1_WACOUNT = "", DIR = O, VEC = [5:0], ISVALID = (C_USE_S_AXI_HP1 == 1), IO_IF = S_AXI_HP1_FIFO_CTRL
PORT S_AXI_HP1_ACLK = "", DIR = I, BUS = S_AXI_HP1, SIGIS = CLK, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_ARVALID = ARVALID, DIR = I, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_AWVALID = AWVALID, DIR = I, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_BREADY = BREADY, DIR = I, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_RDISSUECAP1_EN = "", DIR = I, ISVALID = (C_USE_S_AXI_HP1 == 1), IO_IF = S_AXI_HP1_FIFO_CTRL
PORT S_AXI_HP1_RREADY = RREADY, DIR = I, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_WLAST = WLAST, DIR = I, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_WRISSUECAP1_EN = "", DIR = I, ISVALID = (C_USE_S_AXI_HP1 == 1), IO_IF = S_AXI_HP1_FIFO_CTRL
PORT S_AXI_HP1_WVALID = WVALID, DIR = I, BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_ARBURST = ARBURST, DIR = I, VEC = [1:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_ARLOCK = ARLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_ARSIZE = ARSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_AWBURST = AWBURST, DIR = I, VEC = [1:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_AWLOCK = AWLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_AWSIZE = AWSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_ARPROT = ARPROT, DIR = I, VEC = [2:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_AWPROT = AWPROT, DIR = I, VEC = [2:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_ARADDR = ARADDR, DIR = I, VEC = [31:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_AWADDR = AWADDR, DIR = I, VEC = [31:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_ARCACHE = ARCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_ARLEN = ARLEN, DIR = I, VEC = [3:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_ARQOS = ARQOS, DIR = I, VEC = [3:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_AWCACHE = AWCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_AWLEN = AWLEN, DIR = I, VEC = [3:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_AWQOS = AWQOS, DIR = I, VEC = [3:0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_ARID = ARID, DIR = I, VEC = [(C_S_AXI_HP1_ID_WIDTH - 1) : 0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_AWID = AWID, DIR = I, VEC = [(C_S_AXI_HP1_ID_WIDTH - 1) : 0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_WID = WID, DIR = I, VEC = [(C_S_AXI_HP1_ID_WIDTH - 1) : 0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_HP1_DATA_WIDTH - 1) :0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP1_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_HP1_DATA_WIDTH/8)-1):0], BUS = S_AXI_HP1, ISVALID = (C_USE_S_AXI_HP1 == 1)
PORT S_AXI_HP2_ARESETN = "", DIR = O, SIGIS = RST, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_ARREADY = ARREADY, DIR = O, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_AWREADY = AWREADY, DIR = O, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_BVALID = BVALID, DIR = O, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_RLAST = RLAST, DIR = O, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_RVALID = RVALID, DIR = O, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_WREADY = WREADY, DIR = O, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_BID = BID, DIR = O, VEC = [(C_S_AXI_HP2_ID_WIDTH - 1) : 0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_RID = RID, DIR = O, VEC = [(C_S_AXI_HP2_ID_WIDTH - 1) : 0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_HP2_DATA_WIDTH - 1) :0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_RCOUNT = "", DIR = O, VEC = [7:0], ISVALID = (C_USE_S_AXI_HP2 == 1), IO_IF = S_AXI_HP2_FIFO_CTRL
PORT S_AXI_HP2_WCOUNT = "", DIR = O, VEC = [7:0], ISVALID = (C_USE_S_AXI_HP2 == 1), IO_IF = S_AXI_HP2_FIFO_CTRL
PORT S_AXI_HP2_RACOUNT = "", DIR = O, VEC = [2:0], ISVALID = (C_USE_S_AXI_HP2 == 1), IO_IF = S_AXI_HP2_FIFO_CTRL
PORT S_AXI_HP2_WACOUNT = "", DIR = O, VEC = [5:0], ISVALID = (C_USE_S_AXI_HP2 == 1), IO_IF = S_AXI_HP2_FIFO_CTRL
PORT S_AXI_HP2_ACLK = "", DIR = I, BUS = S_AXI_HP2, SIGIS = CLK, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_ARVALID = ARVALID, DIR = I, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_AWVALID = AWVALID, DIR = I, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_BREADY = BREADY, DIR = I, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_RDISSUECAP1_EN = "", DIR = I, ISVALID = (C_USE_S_AXI_HP2 == 1), IO_IF = S_AXI_HP2_FIFO_CTRL
PORT S_AXI_HP2_RREADY = RREADY, DIR = I, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_WLAST = WLAST, DIR = I, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_WRISSUECAP1_EN = "", DIR = I, ISVALID = (C_USE_S_AXI_HP2 == 1), IO_IF = S_AXI_HP2_FIFO_CTRL
PORT S_AXI_HP2_WVALID = WVALID, DIR = I, BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_ARBURST = ARBURST, DIR = I, VEC = [1:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_ARLOCK = ARLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_ARSIZE = ARSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_AWBURST = AWBURST, DIR = I, VEC = [1:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_AWLOCK = AWLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_AWSIZE = AWSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_ARPROT = ARPROT, DIR = I, VEC = [2:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_AWPROT = AWPROT, DIR = I, VEC = [2:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_ARADDR = ARADDR, DIR = I, VEC = [31:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_AWADDR = AWADDR, DIR = I, VEC = [31:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_ARCACHE = ARCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_ARLEN = ARLEN, DIR = I, VEC = [3:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_ARQOS = ARQOS, DIR = I, VEC = [3:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_AWCACHE = AWCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_AWLEN = AWLEN, DIR = I, VEC = [3:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_AWQOS = AWQOS, DIR = I, VEC = [3:0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_ARID = ARID, DIR = I, VEC = [(C_S_AXI_HP2_ID_WIDTH - 1) : 0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_AWID = AWID, DIR = I, VEC = [(C_S_AXI_HP2_ID_WIDTH - 1) : 0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_WID = WID, DIR = I, VEC = [(C_S_AXI_HP2_ID_WIDTH - 1) : 0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_HP2_DATA_WIDTH - 1) :0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP2_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_HP2_DATA_WIDTH/8)-1):0], BUS = S_AXI_HP2, ISVALID = (C_USE_S_AXI_HP2 == 1)
PORT S_AXI_HP3_ARESETN = "", DIR = O, SIGIS = RST, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_ARREADY = ARREADY, DIR = O, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_AWREADY = AWREADY, DIR = O, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_BVALID = BVALID, DIR = O, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_RLAST = RLAST, DIR = O, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_RVALID = RVALID, DIR = O, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_WREADY = WREADY, DIR = O, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_BID = BID, DIR = O, VEC = [(C_S_AXI_HP3_ID_WIDTH - 1) : 0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_RID = RID, DIR = O, VEC = [(C_S_AXI_HP3_ID_WIDTH - 1) : 0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_HP3_DATA_WIDTH - 1) :0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_RCOUNT = "", DIR = O, VEC = [7:0], ISVALID = (C_USE_S_AXI_HP3 == 1), IO_IF = S_AXI_HP3_FIFO_CTRL
PORT S_AXI_HP3_WCOUNT = "", DIR = O, VEC = [7:0], ISVALID = (C_USE_S_AXI_HP3 == 1), IO_IF = S_AXI_HP3_FIFO_CTRL
PORT S_AXI_HP3_RACOUNT = "", DIR = O, VEC = [2:0], ISVALID = (C_USE_S_AXI_HP3 == 1), IO_IF = S_AXI_HP3_FIFO_CTRL
PORT S_AXI_HP3_WACOUNT = "", DIR = O, VEC = [5:0], ISVALID = (C_USE_S_AXI_HP3 == 1), IO_IF = S_AXI_HP3_FIFO_CTRL
PORT S_AXI_HP3_ACLK = "", DIR = I, BUS = S_AXI_HP3, SIGIS = CLK, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_ARVALID = ARVALID, DIR = I, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_AWVALID = AWVALID, DIR = I, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_BREADY = BREADY, DIR = I, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_RDISSUECAP1_EN = "", DIR = I, ISVALID = (C_USE_S_AXI_HP3 == 1), IO_IF = S_AXI_HP3_FIFO_CTRL
PORT S_AXI_HP3_RREADY = RREADY, DIR = I, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_WLAST = WLAST, DIR = I, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_WRISSUECAP1_EN = "", DIR = I, ISVALID = (C_USE_S_AXI_HP3 == 1), IO_IF = S_AXI_HP3_FIFO_CTRL
PORT S_AXI_HP3_WVALID = WVALID, DIR = I, BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_ARBURST = ARBURST, DIR = I, VEC = [1:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_ARLOCK = ARLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_ARSIZE = ARSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_AWBURST = AWBURST, DIR = I, VEC = [1:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_AWLOCK = AWLOCK, DIR = I, VEC = [1:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_AWSIZE = AWSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_ARPROT = ARPROT, DIR = I, VEC = [2:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_AWPROT = AWPROT, DIR = I, VEC = [2:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_ARADDR = ARADDR, DIR = I, VEC = [31:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_AWADDR = AWADDR, DIR = I, VEC = [31:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_ARCACHE = ARCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_ARLEN = ARLEN, DIR = I, VEC = [3:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_ARQOS = ARQOS, DIR = I, VEC = [3:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_AWCACHE = AWCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_AWLEN = AWLEN, DIR = I, VEC = [3:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_AWQOS = AWQOS, DIR = I, VEC = [3:0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_ARID = ARID, DIR = I, VEC = [(C_S_AXI_HP3_ID_WIDTH - 1) : 0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_AWID = AWID, DIR = I, VEC = [(C_S_AXI_HP3_ID_WIDTH - 1) : 0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_WID = WID, DIR = I, VEC = [(C_S_AXI_HP3_ID_WIDTH - 1) : 0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_HP3_DATA_WIDTH - 1) :0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT S_AXI_HP3_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_HP3_DATA_WIDTH/8)-1):0], BUS = S_AXI_HP3, ISVALID = (C_USE_S_AXI_HP3 == 1)
PORT DMA0_DATYPE = "", DIR = O, VEC = [1:0], ISVALID = (C_USE_DMA0 == 1), IO_IF = DMA0_REQ
PORT DMA0_DAVALID = "", DIR = O, ISVALID = (C_USE_DMA0 == 1), IO_IF = DMA0_REQ
PORT DMA0_DRREADY = "", DIR = O, ISVALID = (C_USE_DMA0 == 1), IO_IF = DMA0_REQ
PORT DMA0_RSTN = "", DIR = O, ISVALID = (C_USE_DMA0 == 1), IO_IF = DMA0_REQ
PORT DMA0_ACLK = "", DIR = I, SIGIS = CLK, ISVALID = (C_USE_DMA0 == 1), IO_IF = DMA0_REQ
PORT DMA0_DAREADY = "", DIR = I, ISVALID = (C_USE_DMA0 == 1), IO_IF = DMA0_REQ
PORT DMA0_DRLAST = "", DIR = I, ISVALID = (C_USE_DMA0 == 1), IO_IF = DMA0_REQ
PORT DMA0_DRVALID = "", DIR = I, ISVALID = (C_USE_DMA0 == 1), IO_IF = DMA0_REQ
PORT DMA0_DRTYPE = "", DIR = I, VEC = [1:0], ISVALID = (C_USE_DMA0 == 1), IO_IF = DMA0_REQ
PORT DMA1_DATYPE = "", DIR = O, VEC = [1:0], ISVALID = (C_USE_DMA1 == 1), IO_IF = DMA1_REQ
PORT DMA1_DAVALID = "", DIR = O, ISVALID = (C_USE_DMA1 == 1), IO_IF = DMA1_REQ
PORT DMA1_DRREADY = "", DIR = O, ISVALID = (C_USE_DMA1 == 1), IO_IF = DMA1_REQ
PORT DMA1_RSTN = "", DIR = O, ISVALID = (C_USE_DMA1 == 1), IO_IF = DMA1_REQ
PORT DMA1_ACLK = "", DIR = I, SIGIS = CLK, ISVALID = (C_USE_DMA1 == 1), IO_IF = DMA1_REQ
PORT DMA1_DAREADY = "", DIR = I, ISVALID = (C_USE_DMA1 == 1), IO_IF = DMA1_REQ
PORT DMA1_DRLAST = "", DIR = I, ISVALID = (C_USE_DMA1 == 1), IO_IF = DMA1_REQ
PORT DMA1_DRVALID = "", DIR = I, ISVALID = (C_USE_DMA1 == 1), IO_IF = DMA1_REQ
PORT DMA1_DRTYPE = "", DIR = I, VEC = [1:0], ISVALID = (C_USE_DMA1 == 1), IO_IF = DMA1_REQ
PORT DMA2_DATYPE = "", DIR = O, VEC = [1:0], ISVALID = (C_USE_DMA2 == 1), IO_IF = DMA2_REQ
PORT DMA2_DAVALID = "", DIR = O, ISVALID = (C_USE_DMA2 == 1), IO_IF = DMA2_REQ
PORT DMA2_DRREADY = "", DIR = O, ISVALID = (C_USE_DMA2 == 1), IO_IF = DMA2_REQ
PORT DMA2_RSTN = "", DIR = O, ISVALID = (C_USE_DMA2 == 1), IO_IF = DMA2_REQ
PORT DMA2_ACLK = "", DIR = I, SIGIS = CLK, ISVALID = (C_USE_DMA2 == 1), IO_IF = DMA2_REQ
PORT DMA2_DAREADY = "", DIR = I, ISVALID = (C_USE_DMA2 == 1), IO_IF = DMA2_REQ
PORT DMA2_DRLAST = "", DIR = I, ISVALID = (C_USE_DMA2 == 1), IO_IF = DMA2_REQ
PORT DMA2_DRVALID = "", DIR = I, ISVALID = (C_USE_DMA2 == 1), IO_IF = DMA2_REQ
PORT DMA3_DRVALID = "", DIR = I, ISVALID = (C_USE_DMA3 == 1), IO_IF = DMA3_REQ
PORT DMA3_DATYPE = "", DIR = O, VEC = [1:0], ISVALID = (C_USE_DMA3 == 1), IO_IF = DMA3_REQ
PORT DMA3_DAVALID = "", DIR = O, ISVALID = (C_USE_DMA3 == 1), IO_IF = DMA3_REQ
PORT DMA3_DRREADY = "", DIR = O, ISVALID = (C_USE_DMA3 == 1), IO_IF = DMA3_REQ
PORT DMA3_RSTN = "", DIR = O, ISVALID = (C_USE_DMA3 == 1), IO_IF = DMA3_REQ
PORT DMA3_ACLK = "", DIR = I, SIGIS = CLK, ISVALID = (C_USE_DMA3 == 1), IO_IF = DMA3_REQ
PORT DMA3_DAREADY = "", DIR = I, ISVALID = (C_USE_DMA3 == 1), IO_IF = DMA3_REQ
PORT DMA3_DRLAST = "", DIR = I, ISVALID = (C_USE_DMA3 == 1), IO_IF = DMA3_REQ
PORT DMA2_DRTYPE = "", DIR = I, VEC = [1:0], ISVALID = (C_USE_DMA2 == 1), IO_IF = DMA2_REQ
PORT DMA3_DRTYPE = "", DIR = I, VEC = [1:0], ISVALID = (C_USE_DMA3 == 1), IO_IF = DMA3_REQ
PORT FTMD_TRACEIN_DATA = "", DIR = I, VEC = [31:0], ISVALID = (C_USE_TRACE == 1), IO_IF = FTM_TRACE_DATA
PORT FTMD_TRACEIN_VALID = "", DIR = I, ISVALID = (C_USE_TRACE == 1), IO_IF = FTM_TRACE_DATA
PORT FTMD_TRACEIN_CLK = "", DIR = I, SIGIS = CLK, ISVALID = (C_USE_TRACE == 1), IO_IF = FTM_TRACE_DATA
PORT FTMD_TRACEIN_ATID = "", DIR = I, VEC = [3:0], ISVALID = (C_USE_TRACE == 1), IO_IF = FTM_TRACE_DATA
PORT FTMT_F2P_TRIG = "", DIR = I, VEC = [3:0], ISVALID = (C_USE_CROSS_TRIGGER == 1), IO_IF = FTM_TRIG
PORT FTMT_F2P_TRIGACK = "", DIR = O, VEC = [3:0], ISVALID = (C_USE_CROSS_TRIGGER == 1), IO_IF = FTM_TRIG
PORT FTMT_F2P_DEBUG = "", DIR = I, VEC = [31:0], ISVALID = (C_USE_CROSS_TRIGGER == 1), IO_IF = FTM_TRIG
PORT FTMT_P2F_TRIGACK = "", DIR = I, VEC = [3:0], ISVALID = (C_USE_CROSS_TRIGGER == 1), IO_IF = FTM_TRIG
PORT FTMT_P2F_TRIG = "", DIR = O, VEC = [3:0], ISVALID = (C_USE_CROSS_TRIGGER == 1), IO_IF = FTM_TRIG
PORT FTMT_P2F_DEBUG = "", DIR = O, VEC = [31:0], ISVALID = (C_USE_CROSS_TRIGGER == 1), IO_IF = FTM_TRIG
PORT FCLK_CLK3 = "", DIR = O, SIGIS = CLK, ISVALID = (C_USE_CR_FABRIC == 1)
PORT FCLK_CLK2 = "", DIR = O, SIGIS = CLK, ISVALID = (C_USE_CR_FABRIC == 1)
PORT FCLK_CLK1 = "", DIR = O, SIGIS = CLK, ISVALID = (C_USE_CR_FABRIC == 1)
PORT FCLK_CLK0 = "", DIR = O, SIGIS = CLK, ISVALID = (C_USE_CR_FABRIC == 1)
PORT FCLK_CLKTRIG3_N = "", DIR = I, ISVALID = (C_USE_CR_FABRIC == 1)
PORT FCLK_CLKTRIG2_N = "", DIR = I, ISVALID = (C_USE_CR_FABRIC == 1)
PORT FCLK_CLKTRIG1_N = "", DIR = I, ISVALID = (C_USE_CR_FABRIC == 1)
PORT FCLK_CLKTRIG0_N = "", DIR = I, ISVALID = (C_USE_CR_FABRIC == 1)
PORT FCLK_RESET3_N = "", DIR = O, SIGIS = RST, ISVALID = (C_USE_CR_FABRIC == 1)
PORT FCLK_RESET2_N = "", DIR = O, SIGIS = RST, ISVALID = (C_USE_CR_FABRIC == 1)
PORT FCLK_RESET1_N = "", DIR = O, SIGIS = RST, ISVALID = (C_USE_CR_FABRIC == 1)
PORT FCLK_RESET0_N = "", DIR = O, SIGIS = RST, ISVALID = (C_USE_CR_FABRIC == 1)
PORT FPGA_IDLE_N = "", DIR = I, ISVALID = (C_USE_AXI_FABRIC_IDLE == 1)
PORT DDR_ARB = "", DIR = I, VEC = [3:0], ISVALID = (C_USE_DDR_BYPASS == 1)
PORT IRQ_F2P = "", DIR = I, VEC = [(C_NUM_F2P_INTR_INPUTS-1) :0], SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT == 1)
PORT Core0_nFIQ = "", DIR = I, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT == 1)
PORT Core0_nIRQ = "", DIR = I, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT == 1)
PORT Core1_nFIQ = "", DIR = I, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT == 1)
PORT Core1_nIRQ = "", DIR = I, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT == 1)
PORT EVENT_EVENTO = "", DIR = O, ISVALID = (C_USE_PROC_EVENT_BUS == 1)
PORT EVENT_STANDBYWFE = "", DIR = O, VEC = [1:0], ISVALID = (C_USE_PROC_EVENT_BUS == 1)
PORT EVENT_STANDBYWFI = "", DIR = O, VEC = [1:0], ISVALID = (C_USE_PROC_EVENT_BUS == 1)
PORT EVENT_EVENTI = "", DIR = I, ISVALID = (C_USE_PROC_EVENT_BUS == 1)
PORT MIO = "", DIR = IO, VEC = [C_MIO_PRIMITIVE - 1:0], THREE_STATE = FALSE, IO_IF = PS_REQUIRED_EXTERNAL_IO
PORT DDR_Clk = "", DIR = IO, SIGIS = CLK, IO_IF = MEMORY_0, IO_IS = DDR_Clk, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1)
PORT DDR_Clk_n = "", DIR = IO, SIGIS = CLK, IO_IF = MEMORY_0, IO_IS = DDR_Clk_n, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1)
PORT DDR_CKE = "", DIR = IO, IO_IF = MEMORY_0, IO_IS = DDR_CLOCK_ENABLE, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1)
PORT DDR_CS_n = "", DIR = IO, IO_IF = MEMORY_0, IO_IS = DDR_CHIP_SELECT, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1)
PORT DDR_RAS_n = "", DIR = IO, IO_IF = MEMORY_0, IO_IS = DDR_ROW_ADDR_SELECT, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1)
PORT DDR_CAS_n = "", DIR = IO, IO_IF = MEMORY_0, IO_IS = DDR_COL_ADDR_SELECT, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1)
PORT DDR_WEB = "", DIR = O, IO_IF = MEMORY_0, IO_IS = DDR_WRITE_ENABLE, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1)
PORT DDR_BankAddr = "", DIR = IO, VEC = [2:0], IO_IF = MEMORY_0, IO_IS = DDR_BANKADDR, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1)
PORT DDR_Addr = "", DIR = IO, VEC = [14:0], IO_IF = MEMORY_0, IO_IS = DDR_ADDRESS, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1)
PORT DDR_ODT = "", DIR = IO, IO_IF = MEMORY_0, IO_IS = DDR_ODT, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1)
PORT DDR_DRSTB = "", DIR = IO, SIGIS = RST, IO_IF = MEMORY_0, IO_IS = DDR_RST_n, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1)
PORT DDR_DQ = "", DIR = IO, VEC = [C_DQ_WIDTH - 1:0], IO_IF = MEMORY_0, IO_IS = DDR_DATA, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1)
PORT DDR_DM = "", DIR = IO, VEC = [C_DM_WIDTH - 1:0], IO_IF = MEMORY_0, IO_IS = DDR_DATA_MASK, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1)
PORT DDR_DQS = "", DIR = IO, VEC = [C_DQS_WIDTH - 1:0], IO_IF = MEMORY_0, IO_IS = DDR_DATA_STROBE, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1)
PORT DDR_DQS_n = "", DIR = IO, VEC = [C_DQS_WIDTH - 1:0], IO_IF = MEMORY_0, IO_IS = DDR_DATA_STROBE_n, THREE_STATE = FALSE, ISVALID = (C_EN_DDR == 1)
PORT DDR_VRN = "", DIR = IO, THREE_STATE = FALSE, IO_IF = MEMORY_0, ISVALID = (C_EN_DDR == 1)
PORT DDR_VRP = "", DIR = IO, THREE_STATE = FALSE, IO_IF = MEMORY_0, ISVALID = (C_EN_DDR == 1)
PORT PS_SRSTB = "", DIR = I, IO_IF = PS_REQUIRED_EXTERNAL_IO
PORT PS_CLK = "", DIR = I, SIGIS = CLK, IO_IF = PS_REQUIRED_EXTERNAL_IO
PORT PS_PORB = "", DIR = I, IO_IF = PS_REQUIRED_EXTERNAL_IO
PORT IRQ_P2F_DMAC_ABORT = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 && (C_USE_DMA0 == 1 || C_USE_DMA1 == 1 ||C_USE_DMA2 == 1 || C_USE_DMA3 == 1 ))
PORT IRQ_P2F_DMAC0 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 && (C_USE_DMA0 == 1 || C_USE_DMA1 == 1 ||C_USE_DMA2 == 1 || C_USE_DMA3 == 1 ))
PORT IRQ_P2F_DMAC1 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 && (C_USE_DMA0 == 1 || C_USE_DMA1 == 1 ||C_USE_DMA2 == 1 || C_USE_DMA3 == 1 ))
PORT IRQ_P2F_DMAC2 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 && (C_USE_DMA0 == 1 || C_USE_DMA1 == 1 ||C_USE_DMA2 == 1 || C_USE_DMA3 == 1 ))
PORT IRQ_P2F_DMAC3 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 && (C_USE_DMA0 == 1 || C_USE_DMA1 == 1 ||C_USE_DMA2 == 1 || C_USE_DMA3 == 1 ))
PORT IRQ_P2F_DMAC4 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 && (C_USE_DMA0 == 1 || C_USE_DMA1 == 1 ||C_USE_DMA2 == 1 || C_USE_DMA3 == 1 ))
PORT IRQ_P2F_DMAC5 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 && (C_USE_DMA0 == 1 || C_USE_DMA1 == 1 ||C_USE_DMA2 == 1 || C_USE_DMA3 == 1 ))
PORT IRQ_P2F_DMAC6 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 && (C_USE_DMA0 == 1 || C_USE_DMA1 == 1 ||C_USE_DMA2 == 1 || C_USE_DMA3 == 1 ))
PORT IRQ_P2F_DMAC7 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 && (C_USE_DMA0 == 1 || C_USE_DMA1 == 1 ||C_USE_DMA2 == 1 || C_USE_DMA3 == 1 ))
PORT IRQ_P2F_SMC = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 && C_EN_SMC == 1)
PORT IRQ_P2F_QSPI = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 && C_EN_QSPI == 1)
PORT IRQ_P2F_CTI = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 && C_USE_CROSS_TRIGGER == 1)
PORT IRQ_P2F_GPIO = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 && C_EN_GPIO == 1)
PORT IRQ_P2F_USB0 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 &&  C_EN_USB0 == 1)
PORT IRQ_P2F_ENET0 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 &&  C_EN_ENET0 == 1)
PORT IRQ_P2F_ENET_WAKE0 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 &&  C_EN_ENET0 == 1)
PORT IRQ_P2F_SDIO0 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 &&  C_EN_SDIO0 == 1)
PORT IRQ_P2F_I2C0 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 &&  C_EN_I2C0 == 1)
PORT IRQ_P2F_SPI0 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 &&  C_EN_SPI0 == 1)
PORT IRQ_P2F_UART0 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 &&  C_EN_UART0 == 1)
PORT IRQ_P2F_CAN0 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 &&  C_EN_CAN0 == 1)
PORT IRQ_P2F_USB1 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 &&  C_EN_USB1 == 1)
PORT IRQ_P2F_ENET1 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 &&  C_EN_ENET1 == 1)
PORT IRQ_P2F_ENET_WAKE1 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 &&  C_EN_ENET1 == 1)
PORT IRQ_P2F_SDIO1 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 &&  C_EN_SDIO1 == 1)
PORT IRQ_P2F_I2C1 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 &&  C_EN_I2C1 == 1)
PORT IRQ_P2F_SPI1 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 &&  C_EN_SPI1 == 1)
PORT IRQ_P2F_UART1 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 &&  C_EN_UART1 == 1)
PORT IRQ_P2F_CAN1 = "", DIR = O, SIGIS = INTERRUPT, ISVALID = (C_USE_FABRIC_INTERRUPT ==1 &&  C_EN_CAN1 == 1)
PORT ENET0_MDIO = "", TRI_O = ENET0_MDIO_O, TRI_T = ENET0_MDIO_T, DIR = IO, TRI_I = ENET0_MDIO_I, THREE_STATE = TRUE, IO_IF = ETHERNETIF_0, IO_IS = MDIO, ISVALID = (C_EN_EMIO_ENET0 == 1)
PORT ENET1_MDIO = "", TRI_O = ENET1_MDIO_O, TRI_T = ENET1_MDIO_T, DIR = IO, TRI_I = ENET1_MDIO_I, THREE_STATE = TRUE, IO_IF = ETHERNETIF_1, IO_IS = MDIO, ISVALID = (C_EN_EMIO_ENET1 == 1)
PORT GPIO = "", TRI_O = GPIO_O, TRI_T = GPIO_T, DIR = IO, VEC = [(C_EMIO_GPIO_WIDTH-1):0], TRI_I = GPIO_I, THREE_STATE = TRUE, ENABLE = MULTI, IO_IF = GPIO_0, IO_IS = gpio_io, ISVALID = (C_EN_EMIO_GPIO == 1)
PORT I2C0_SDA = "", TRI_O = I2C0_SDA_O, TRI_T = I2C0_SDA_T, DIR = IO, TRI_I = I2C0_SDA_I, THREE_STATE = TRUE, IO_IF = IIC_0, IO_IS = Serial_Data, ISVALID = (C_EN_EMIO_I2C0 == 1)
PORT I2C0_SCL = "", TRI_O = I2C0_SCL_O, TRI_T = I2C0_SCL_T, DIR = IO, TRI_I = I2C0_SCL_I, THREE_STATE = TRUE, IO_IF = IIC_0, IO_IS = Serial_Clock, ISVALID = (C_EN_EMIO_I2C0 == 1)
PORT I2C1_SDA = "", TRI_O = I2C1_SDA_O, TRI_T = I2C1_SDA_T, DIR = IO, TRI_I = I2C1_SDA_I, THREE_STATE = TRUE, IO_IF = IIC_1, IO_IS = Serial_Data, ISVALID = (C_EN_EMIO_I2C1 == 1)
PORT I2C1_SCL = "", TRI_O = I2C1_SCL_O, TRI_T = I2C1_SCL_T, DIR = IO, TRI_I = I2C1_SCL_I, THREE_STATE = TRUE, IO_IF = IIC_1, IO_IS = Serial_Clock, ISVALID = (C_EN_EMIO_I2C1 == 1)
PORT SDIO0_CMD = "", TRI_O = SDIO0_CMD_O, TRI_T = SDIO0_CMD_T, DIR = IO, TRI_I = SDIO0_CMD_I, THREE_STATE = TRUE, IO_IF = SDIO_0, ISVALID = (C_EN_EMIO_SDIO0 == 1)
PORT SDIO0_DATA = "", TRI_O = SDIO0_DATA_O, TRI_T = SDIO0_DATA_T, DIR = IO, VEC = [3:0], TRI_I = SDIO0_DATA_I, THREE_STATE = TRUE, ENABLE = MULTI, IO_IF = SDIO_0, ISVALID = (C_EN_EMIO_SDIO0 == 1)
PORT SDIO1_CMD = "", TRI_O = SDIO1_CMD_O, TRI_T = SDIO1_CMD_T, DIR = IO, TRI_I = SDIO1_CMD_I, THREE_STATE = TRUE, IO_IF = SDIO_1, ISVALID = (C_EN_EMIO_SDIO1 == 1)
PORT SDIO1_DATA = "", TRI_O = SDIO1_DATA_O, TRI_T = SDIO1_DATA_T, DIR = IO, VEC = [3:0], TRI_I = SDIO1_DATA_I, THREE_STATE = TRUE, ENABLE = MULTI, IO_IF = SDIO_1, ISVALID = (C_EN_EMIO_SDIO1 == 1)
PORT SPI0_SCLK = "", TRI_O = SPI0_SCLK_O, TRI_T = SPI0_SCLK_T, DIR = IO, TRI_I = SPI0_SCLK_I, THREE_STATE = TRUE, SIGIS = CLK, IO_IF = SPI_0, IO_IS = clk_out, ISVALID = (C_EN_EMIO_SPI0 == 1)
PORT SPI0_MOSI = "", TRI_O = SPI0_MOSI_O, TRI_T = SPI0_MOSI_T, DIR = IO, TRI_I = SPI0_MOSI_I, THREE_STATE = TRUE, IO_IF = SPI_0, IO_IS = master_data, ISVALID = (C_EN_EMIO_SPI0 == 1)
PORT SPI0_MISO = "", TRI_O = SPI0_MISO_O, TRI_T = SPI0_MISO_T, DIR = IO, TRI_I = SPI0_MISO_I, THREE_STATE = TRUE, IO_IF = SPI_0, IO_IS = slave_data, ISVALID = (C_EN_EMIO_SPI0 == 1)
PORT SPI0_SS = "", TRI_O = SPI0_SS_O, TRI_T = SPI0_SS_T, DIR = IO, TRI_I = SPI0_SS_I, THREE_STATE = TRUE, IO_IF = SPI_0, IO_IS = slave_select, ISVALID = (C_EN_EMIO_SPI0 == 1)
PORT SPI1_SCLK = "", TRI_O = SPI1_SCLK_O, TRI_T = SPI1_SCLK_T, DIR = IO, TRI_I = SPI1_SCLK_I, THREE_STATE = TRUE, SIGIS = CLK, IO_IF = SPI_1, IO_IS = clk_out, ISVALID = (C_EN_EMIO_SPI1 == 1)
PORT SPI1_MOSI = "", TRI_O = SPI1_MOSI_O, TRI_T = SPI1_MOSI_T, DIR = IO, TRI_I = SPI1_MOSI_I, THREE_STATE = TRUE, IO_IF = SPI_1, IO_IS = master_data, ISVALID = (C_EN_EMIO_SPI1 == 1)
PORT SPI1_MISO = "", TRI_O = SPI1_MISO_O, TRI_T = SPI1_MISO_T, DIR = IO, TRI_I = SPI1_MISO_I, THREE_STATE = TRUE, IO_IF = SPI_1, IO_IS = slave_data, ISVALID = (C_EN_EMIO_SPI1 == 1)
PORT SPI1_SS = "", TRI_O = SPI1_SS_O, TRI_T = SPI1_SS_T, DIR = IO, TRI_I = SPI1_SS_I, THREE_STATE = TRUE, IO_IF = SPI_1, IO_IS = slave_select, ISVALID = (C_EN_EMIO_SPI1 == 1)

END
