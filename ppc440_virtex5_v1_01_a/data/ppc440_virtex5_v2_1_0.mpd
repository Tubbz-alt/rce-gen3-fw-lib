#-- Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
#--
#-- This file contains confidential and proprietary information
#-- of Xilinx, Inc. and is protected under U.S. and
#-- international copyright and other intellectual property
#-- laws.
#--
#-- DISCLAIMER
#-- This disclaimer is not a license and does not grant any
#-- rights to the materials distributed herewith. Except as
#-- otherwise provided in a valid license issued to you by
#-- Xilinx, and to the maximum extent permitted by applicable
#-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
#-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
#-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
#-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
#-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
#-- (2) Xilinx shall not be liable (whether in contract or tort,
#-- including negligence, or under any other theory of
#-- liability) for any loss or damage of any kind or nature
#-- related to, arising under or in connection with these
#-- materials, including for any direct, or any indirect,
#-- special, incidental, or consequential loss or damage
#-- (including loss of data, profits, goodwill, or any type of
#-- loss or damage suffered as a result of any action brought
#-- by a third party) even if such damage or loss was
#-- reasonably foreseeable or Xilinx had been advised of the
#-- possibility of the same.
#--
#-- CRITICAL APPLICATIONS
#-- Xilinx products are not designed or intended to be fail-
#-- safe, or for use in any application requiring fail-safe
#-- performance, such as life-support or safety devices or
#-- systems, Class III medical devices, nuclear facilities,
#-- applications related to the deployment of airbags, or any
#-- other applications that could lead to death, personal
#-- injury, or severe property or environmental damage
#-- (individually and collectively, "Critical
#-- Applications"). Customer assumes the sole risk and
#-- liability of any use of Xilinx products in Critical
#-- Applications, subject only to applicable laws and
#-- regulations governing limitations on product liability.
#--
#-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
#-- PART OF THIS FILE AT ALL TIMES.

###################################################################
##
## Name     : ppc440_virtex5
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN ppc440_virtex5

## Peripheral Options
OPTION IPTYPE = PROCESSOR
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION SPECIAL = PPC440
OPTION IPLEVEL_DRC_PROC = check_iplevel_settings
OPTION SYSLEVEL_DRC_PROC = check_syslevel_settings
OPTION RUN_NGCBUILD = TRUE
OPTION PLATGEN_SYSLEVEL_UPDATE_PROC = generate_corelevel_ucf
OPTION CLK_FREQ_RATIOS = (CPMINTERCONNECTCLK/CPMC440CLK=(1/[1:99],2/[3:99]), (CPMPPCMPLBCLK,CPMPPCS0PLBCLK,CPMPPCS1PLBCLK)/CPMINTERCONNECTCLK=(1/[1:16]), CPMMCCLK/CPMINTERCONNECTCLK=(1/[1:16],2/3), CPMFCMCLK/CPMC440CLK=(1/[1:16]))
OPTION LAST_UPDATED = 10.1.2
OPTION DESC = PowerPC 440 Virtex-5
OPTION LONG_DESC = A wrapper to instantiate the PowerPC 440 Processor Block primitive
OPTION IP_GROUP = Processor:PPC
OPTION ARCH_SUPPORT_MAP = (virtex5fx=PRODUCTION)
OPTION STYLE = HDL

IO_INTERFACE IO_IF = cpudbg_0, IO_TYPE = XIL_CPUDEBUG_V1
IO_INTERFACE IO_IF = trace_0, IO_TYPE = XIL_TRACE_V1

## Bus Interfaces
BUS_INTERFACE BUS = MPLB, BUS_STD = PLBV46, BUS_TYPE = MASTER, GENERATE_BURSTS = TRUE, SHARES_ADDR = PPC440MC
BUS_INTERFACE BUS = SPLB0, BUS_STD = PLBV46, BUS_TYPE = SLAVE
BUS_INTERFACE BUS = SPLB1, BUS_STD = PLBV46, BUS_TYPE = SLAVE
BUS_INTERFACE BUS = PPC440MC, BUS_STD = XIL_PPC440MC, BUS_TYPE = INITIATOR, SHARES_ADDR = MPLB
BUS_INTERFACE BUS = LLDMA0, BUS_STD = XIL_LL_DMA, BUS_TYPE = TARGET, ISVALID = (C_NUM_DMA > 0)
BUS_INTERFACE BUS = LLDMA1, BUS_STD = XIL_LL_DMA, BUS_TYPE = TARGET, ISVALID = (C_NUM_DMA > 1)
BUS_INTERFACE BUS = LLDMA2, BUS_STD = XIL_LL_DMA, BUS_TYPE = TARGET, ISVALID = (C_NUM_DMA > 2)
BUS_INTERFACE BUS = LLDMA3, BUS_STD = XIL_LL_DMA, BUS_TYPE = TARGET, ISVALID = (C_NUM_DMA > 3)
BUS_INTERFACE BUS = MDCR, BUS_STD = DCR, BUS_TYPE = MASTER
BUS_INTERFACE BUS = SDCR, BUS_STD = DCR, BUS_TYPE = SLAVE
BUS_INTERFACE BUS = MFCB, BUS_STD = FCB2, BUS_TYPE = MASTER
BUS_INTERFACE BUS = MFCM, BUS_STD = XIL_FCM2, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = JTAGPPC, BUS_STD = XIL_JTAGPPC, BUS_TYPE = TARGET
BUS_INTERFACE BUS = RESETPPC, BUS_STD = XIL_RESETPPC, BUS_TYPE = TARGET

## Generics for VHDL or Parameters for Verilog
PARAMETER C_PIR = 0b1111, DT = std_logic_vector(28 to 31), DESC = 'Processor Identification Register (4 LSBs)'
PARAMETER C_ENDIAN_RESET = 0, DT = std_logic, VALUES = (0 = Big Endian, 1 = Little Endian), DESC = 'Reset value of Endian storage byte ordering'
PARAMETER C_USER_RESET = 0b0000, DT = std_logic_vector(0 to 3), DESC = 'Reset value for user defined storage attributes (Tattribute[4:7])'
PARAMETER C_INTERCONNECT_IMASK = 0xffffffff, DT = BIT_VECTOR(0 to 31), DESC = 'Interrupt mask for Crossbar, PLB Bridges, and MIB (IMASK DCR)'
PARAMETER C_ICU_RD_FETCH_PLB_PRIO = 0b00, DT = std_logic_vector(0 to 1), VALUES = (0b00='00 (Lowest)', 0b01=01, 0b10=10, 0b11='11 (Highest)'), DESC = 'PLB priority for fetch requests'
PARAMETER C_ICU_RD_SPEC_PLB_PRIO = 0b00, DT = std_logic_vector(0 to 1), VALUES = (0b00='00 (Lowest)', 0b01=01, 0b10=10, 0b11='11 (Highest)'), DESC = 'PLB priority for speculative fetch requests'
PARAMETER C_ICU_RD_TOUCH_PLB_PRIO = 0b00, DT = std_logic_vector(0 to 1), VALUES = (0b00='00 (Lowest)', 0b01=01, 0b10=10, 0b11='11 (Highest)'), DESC = 'PLB priority for icbt requests'
PARAMETER C_DCU_RD_LD_CACHE_PLB_PRIO = 0b00, DT = std_logic_vector(0 to 1), VALUES = (0b00='00 (Lowest)', 0b01=01, 0b10=10, 0b11='11 (Highest)'), DESC = 'PLB priority for non-urgent cacheable load requests'
PARAMETER C_DCU_RD_NONCACHE_PLB_PRIO = 0b00, DT = std_logic_vector(0 to 1), VALUES = (0b00='00 (Lowest)', 0b01=01, 0b10=10, 0b11='11 (Highest)'), DESC = 'PLB priority for non-urgent non-cacheable load requests'
PARAMETER C_DCU_RD_TOUCH_PLB_PRIO = 0b00, DT = std_logic_vector(0 to 1), VALUES = (0b00='00 (Lowest)', 0b01=01, 0b10=10, 0b11='11 (Highest)'), DESC = 'PLB priority for dcbt requests'
PARAMETER C_DCU_RD_URGENT_PLB_PRIO = 0b00, DT = std_logic_vector(0 to 1), VALUES = (0b00='00 (Lowest)', 0b01=01, 0b10=10, 0b11='11 (Highest)'), DESC = 'PLB priority for urgent load requests'
PARAMETER C_DCU_WR_FLUSH_PLB_PRIO = 0b00, DT = std_logic_vector(0 to 1), VALUES = (0b00='00 (Lowest)', 0b01=01, 0b10=10, 0b11='11 (Highest)'), DESC = 'PLB priority for non-urgent flush requests'
PARAMETER C_DCU_WR_STORE_PLB_PRIO = 0b00, DT = std_logic_vector(0 to 1), VALUES = (0b00='00 (Lowest)', 0b01=01, 0b10=10, 0b11='11 (Highest)'), DESC = 'PLB priority for non-urgent store requests'
PARAMETER C_DCU_WR_URGENT_PLB_PRIO = 0b00, DT = std_logic_vector(0 to 1), VALUES = (0b00='00 (Lowest)', 0b01=01, 0b10=10, 0b11='11 (Highest)'), DESC = 'PLB priority for urgent store requests'
PARAMETER C_DMA0_PLB_PRIO = 0b00, DT = bit_vector(0 to 1), ISVALID = (C_NUM_DMA > 0), VALUES = (0b00='00 (Lowest)', 0b01=01, 0b10=10, 0b11='11 (Highest)'), DESC = 'PLB priority for DMA0 requests'
PARAMETER C_DMA1_PLB_PRIO = 0b00, DT = bit_vector(0 to 1), ISVALID = (C_NUM_DMA > 1), VALUES = (0b00='00 (Lowest)', 0b01=01, 0b10=10, 0b11='11 (Highest)'), DESC = 'PLB priority for DMA1 requests'
PARAMETER C_DMA2_PLB_PRIO = 0b00, DT = bit_vector(0 to 1), ISVALID = (C_NUM_DMA > 2), VALUES = (0b00='00 (Lowest)', 0b01=01, 0b10=10, 0b11='11 (Highest)'), DESC = 'PLB priority for DMA2 requests'
PARAMETER C_DMA3_PLB_PRIO = 0b00, DT = bit_vector(0 to 1), ISVALID = (C_NUM_DMA > 3), VALUES = (0b00='00 (Lowest)', 0b01=01, 0b10=10, 0b11='11 (Highest)'), DESC = 'PLB priority for DMA3 requests'
PARAMETER C_IDCR_BASEADDR = 0b1111111111, DT = std_logic_vector(0 to 9), BUS = SDCR:MDCR, MIN_SIZE = 0x100, DESC = 'Base address of the internal DCR registers'
PARAMETER C_IDCR_HIGHADDR = 0b0000000000, DT = std_logic_vector(0 to 9), BUS = SDCR:MDCR, DESC = 'High address of the internal DCR registers'
PARAMETER C_APU_CONTROL = 0b00010000000000000, DT = BIT_VECTOR(0 to 16), DESC = 'APU Control register'
PARAMETER C_APU_UDI_0 = 0b000000000000000000000000, DT = BIT_VECTOR(0 to 23), DESC = 'UDI configuration register 0'
PARAMETER C_APU_UDI_1 = 0b000000000000000000000000, DT = BIT_VECTOR(0 to 23), DESC = 'UDI configuration register 1'
PARAMETER C_APU_UDI_2 = 0b000000000000000000000000, DT = BIT_VECTOR(0 to 23), DESC = 'UDI configuration register 2'
PARAMETER C_APU_UDI_3 = 0b000000000000000000000000, DT = BIT_VECTOR(0 to 23), DESC = 'UDI configuration register 3'
PARAMETER C_APU_UDI_4 = 0b000000000000000000000000, DT = BIT_VECTOR(0 to 23), DESC = 'UDI configuration register 4'
PARAMETER C_APU_UDI_5 = 0b000000000000000000000000, DT = BIT_VECTOR(0 to 23), DESC = 'UDI configuration register 5'
PARAMETER C_APU_UDI_6 = 0b000000000000000000000000, DT = BIT_VECTOR(0 to 23), DESC = 'UDI configuration register 6'
PARAMETER C_APU_UDI_7 = 0b000000000000000000000000, DT = BIT_VECTOR(0 to 23), DESC = 'UDI configuration register 7'
PARAMETER C_APU_UDI_8 = 0b000000000000000000000000, DT = BIT_VECTOR(0 to 23), DESC = 'UDI configuration register 8'
PARAMETER C_APU_UDI_9 = 0b000000000000000000000000, DT = BIT_VECTOR(0 to 23), DESC = 'UDI configuration register 9'
PARAMETER C_APU_UDI_10 = 0b000000000000000000000000, DT = BIT_VECTOR(0 to 23), DESC = 'UDI configuration register 10'
PARAMETER C_APU_UDI_11 = 0b000000000000000000000000, DT = BIT_VECTOR(0 to 23), DESC = 'UDI configuration register 11'
PARAMETER C_APU_UDI_12 = 0b000000000000000000000000, DT = BIT_VECTOR(0 to 23), DESC = 'UDI configuration register 12'
PARAMETER C_APU_UDI_13 = 0b000000000000000000000000, DT = BIT_VECTOR(0 to 23), DESC = 'UDI configuration register 13'
PARAMETER C_APU_UDI_14 = 0b000000000000000000000000, DT = BIT_VECTOR(0 to 23), DESC = 'UDI configuration register 14'
PARAMETER C_APU_UDI_15 = 0b000000000000000000000000, DT = BIT_VECTOR(0 to 23), DESC = 'UDI configuration register 15'
PARAMETER C_PPC440MC_ADDR_BASE = 0xFFFFFFFF, DT = std_logic_vector(0 to 31), ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ppc440mc_addr
PARAMETER C_PPC440MC_ADDR_HIGH = 0x00000000, DT = std_logic_vector(0 to 31), ASSIGNMENT = UPDATE, SYSLEVEL_UPDATE_VALUE_PROC = syslevel_update_ppc440mc_addr
PARAMETER C_PPC440MC_ROW_CONFLICT_MASK = 0x00000000, DT = BIT_VECTOR(0 to 31), DESC = 'Memory row conflict mask'
PARAMETER C_PPC440MC_BANK_CONFLICT_MASK = 0x00000000, DT = BIT_VECTOR(0 to 31), DESC = 'Memory bank conflict mask'
PARAMETER C_PPC440MC_CONTROL = 0x0000008f, DT = BIT_VECTOR(0 to 31), DESC = 'Memory Controller Interface configuration register (MI_CONTROL DCR)'
PARAMETER C_PPC440MC_PRIO_ICU = 4, DT = integer, RANGE = (0:4), DESC = 'Secondary priority for MCI instruction fetches'
PARAMETER C_PPC440MC_PRIO_DCUW = 3, DT = integer, RANGE = (0:4), DESC = 'Secondary priority for MCI data stores'
PARAMETER C_PPC440MC_PRIO_DCUR = 2, DT = integer, RANGE = (0:4), DESC = 'Secondary priority for MCI data loads'
PARAMETER C_PPC440MC_PRIO_SPLB1 = 0, DT = integer, RANGE = (0:4), DESC = 'Secondary priority for MCI requests from SPLB1, DMA2 or DMA3'
PARAMETER C_PPC440MC_PRIO_SPLB0 = 1, DT = integer, RANGE = (0:4), DESC = 'Secondary priority for MCI requests from SPLB0, DMA0 or DMA1'
PARAMETER C_PPC440MC_ARB_MODE = 0, DT = integer, VALUES = (0 = 'Least Recently Used', 1 = 'Round-Robin', 2= 'Fixed priority'), DESC = 'MCI arbitration mode'
PARAMETER C_PPC440MC_MAX_BURST = 8, DT = integer, RANGE = (1,2,4,8,16), DESC = 'Maximum number of quad-words per burst through MCI '
PARAMETER C_MPLB_AWIDTH = 32, DT = integer, BUS = MPLB, ASSIGNMENT = UPDATE
PARAMETER C_MPLB_DWIDTH = 128, DT = integer, BUS = MPLB, ASSIGNMENT = UPDATE
PARAMETER C_MPLB_NATIVE_DWIDTH = 128, DT = integer, BUS = MPLB, ASSIGNMENT = CONSTANT
PARAMETER C_MPLB_COUNTER = 0x00000500, DT = BIT_VECTOR(0 to 31), DESC = 'NOT SUPPORTED'
PARAMETER C_MPLB_PRIO_ICU = 4, DT = integer, RANGE = (0:4), DESC = 'Secondary priority for MPLB instruction fetches'
PARAMETER C_MPLB_PRIO_DCUW = 3, DT = integer, RANGE = (0:4), DESC = 'Secondary priority for MPLB data stores'
PARAMETER C_MPLB_PRIO_DCUR = 2, DT = integer, RANGE = (0:4), DESC = 'Secondary priority for MPLB data loads'
PARAMETER C_MPLB_PRIO_SPLB1 = 0, DT = integer, RANGE = (0:4), DESC = 'Secondary priority for MPLB requests from SPLB0, DMA0 or DMA1'
PARAMETER C_MPLB_PRIO_SPLB0 = 1, DT = integer, RANGE = (0:4), DESC = 'Secondary priority for MPLB requests from SPLB0, DMA0 or DMA1'
PARAMETER C_MPLB_ARB_MODE = 0, DT = integer, VALUES = (0 = 'Least Recently Used', 1 = 'Round-Robin', 2= 'Fixed priority'), DESC = 'MPLB arbitration mode'
PARAMETER C_MPLB_SYNC_TATTRIBUTE = 0, DT = integer, VALUES = (0 = 'Disable SYNC', 1 = 'Enable Sync'), DESC = 'Value of Sync attribute (Tattribute[7]) on MPLB'
PARAMETER C_MPLB_MAX_BURST = 8, DT = integer, RANGE = (1,2,4,8,16), DESC = 'Maximum number of quad-words per burst through MPLB'
PARAMETER C_MPLB_ALLOW_LOCK_XFER = 1, DT = integer, VALUES = (0 = 'No', 1 = 'Yes'), DESC = 'Allow locked transfers on MPLB '
PARAMETER C_MPLB_READ_PIPE_ENABLE = 1, DT = integer, VALUES = (0 = 'No', 1 = 'Yes'), DESC = 'Allow read address pipelining on MPLB'
PARAMETER C_MPLB_WRITE_PIPE_ENABLE = 1, DT = integer, VALUES = (0 = 'No', 1 = 'Yes'), ISVALID = (C_MPLB_WRITE_POST_ENABLE > 0), DESC = 'Allow write address pipelining on MPLB '
PARAMETER C_MPLB_WRITE_POST_ENABLE = 1, DT = integer, VALUES = (0 = 'No', 1 = 'Yes'), DESC = 'Allow posted writes on MPLB and SPLB interfaces'
PARAMETER C_MPLB_P2P = 0, BUS = MPLB, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_MPLB_WDOG_ENABLE = 1, DT = integer, RANGE = (0:1), DESC = 'NOT SUPPORTED'
PARAMETER C_SPLB0_AWIDTH = 32, DT = integer, BUS = SPLB0, ASSIGNMENT = UPDATE
PARAMETER C_SPLB0_DWIDTH = 128, DT = integer, BUS = SPLB0, ASSIGNMENT = UPDATE
PARAMETER C_SPLB0_NATIVE_DWIDTH = 128, DT = integer, BUS = SPLB0, ASSIGNMENT = CONSTANT
PARAMETER C_SPLB0_SUPPORT_BURSTS = 1, DT = integer, BUS = SPLB0, ASSIGNMENT = CONSTANT
PARAMETER C_SPLB0_USE_MPLB_ADDR = 0, DT = integer, VALUES = (0 = 'No', 1 = 'Yes'), DESC = 'Allow access to MPLB via SPLB0'
PARAMETER C_SPLB0_NUM_MPLB_ADDR_RNG = 0, DT = integer, RANGE = (0:4), DESC = 'Number of MPLB address ranges accessible via SPLB0'
PARAMETER C_SPLB0_RNG_MC_BASEADDR = 0xffffffff, DT = std_logic_vector(0 to 31), BUS = SPLB0, MIN_SIZE = 0x08000000, DESC = 'MCI address range accessible via SPLB0'
PARAMETER C_SPLB0_RNG_MC_HIGHADDR = 0x00000000, DT = std_logic_vector(0 to 31), BUS = SPLB0
PARAMETER C_SPLB0_RNG0_MPLB_BASEADDR = 0xffffffff, DT = std_logic_vector(0 to 31), BUS = SPLB0, BRIDGE_TO = MPLB, ISVALID = (C_SPLB0_NUM_MPLB_ADDR_RNG * C_SPLB0_USE_MPLB_ADDR >= 1), ADDR_TYPE = BRIDGE, MIN_SIZE = 0x08000000, DESC = 'Range 0 of MPLB addresses accessible via SPLB0'
PARAMETER C_SPLB0_RNG0_MPLB_HIGHADDR = 0x00000000, DT = std_logic_vector(0 to 31), BUS = SPLB0
PARAMETER C_SPLB0_RNG1_MPLB_BASEADDR = 0xffffffff, DT = std_logic_vector(0 to 31), BUS = SPLB0, BRIDGE_TO = MPLB, ISVALID = (C_SPLB0_NUM_MPLB_ADDR_RNG * C_SPLB0_USE_MPLB_ADDR >= 2), ADDR_TYPE = BRIDGE, MIN_SIZE = 0x08000000, DESC = 'Range 1 of MPLB addresses accessible via SPLB0'
PARAMETER C_SPLB0_RNG1_MPLB_HIGHADDR = 0x00000000, DT = std_logic_vector(0 to 31), BUS = SPLB0
PARAMETER C_SPLB0_RNG2_MPLB_BASEADDR = 0xffffffff, DT = std_logic_vector(0 to 31), BUS = SPLB0, BRIDGE_TO = MPLB, ISVALID = (C_SPLB0_NUM_MPLB_ADDR_RNG * C_SPLB0_USE_MPLB_ADDR >= 3), ADDR_TYPE = BRIDGE, MIN_SIZE = 0x08000000, DESC = 'Range 2 of MPLB addresses accessible via SPLB0'
PARAMETER C_SPLB0_RNG2_MPLB_HIGHADDR = 0x00000000, DT = std_logic_vector(0 to 31), BUS = SPLB0
PARAMETER C_SPLB0_RNG3_MPLB_BASEADDR = 0xffffffff, DT = std_logic_vector(0 to 31), BUS = SPLB0, BRIDGE_TO = MPLB, ISVALID = (C_SPLB0_NUM_MPLB_ADDR_RNG * C_SPLB0_USE_MPLB_ADDR >= 4), ADDR_TYPE = BRIDGE, MIN_SIZE = 0x08000000, DESC = 'Range 3 of MPLB addresses accessible via SPLB0'
PARAMETER C_SPLB0_RNG3_MPLB_HIGHADDR = 0x00000000, DT = std_logic_vector(0 to 31), BUS = SPLB0
PARAMETER C_SPLB0_NUM_MASTERS = 1, DT = INTEGER, BUS = SPLB0, ASSIGNMENT = UPDATE
PARAMETER C_SPLB0_MID_WIDTH = 1, DT = INTEGER, BUS = SPLB0, ASSIGNMENT = UPDATE
PARAMETER C_SPLB0_ALLOW_LOCK_XFER = 1, DT = integer, VALUES = (0 = 'No', 1 = 'Yes'), DESC = 'Allow locked transfers on SPLB0 '
PARAMETER C_SPLB0_READ_PIPE_ENABLE = 1, DT = integer, VALUES = (0 = 'No', 1 = 'Yes'), DESC = 'Allow read address pipelining on SPLB0'
PARAMETER C_SPLB0_PROPAGATE_MIRQ = 0, DT = integer, VALUES = (0 = 'No', 1 = 'Yes'), DESC = 'Propagate MIRQ signals from crossbar onto SPLB0 bus'
PARAMETER C_SPLB0_P2P = -1, DT = integer, BUS = SPLB0, ASSIGNMENT = UPDATE
PARAMETER C_SPLB1_AWIDTH = 32, DT = integer, BUS = SPLB1, ASSIGNMENT = UPDATE
PARAMETER C_SPLB1_DWIDTH = 128, DT = integer, BUS = SPLB1, ASSIGNMENT = UPDATE
PARAMETER C_SPLB1_NATIVE_DWIDTH = 128, DT = integer, BUS = SPLB1, ASSIGNMENT = CONSTANT
PARAMETER C_SPLB1_SUPPORT_BURSTS = 1, DT = integer, BUS = SPLB1, ASSIGNMENT = CONSTANT
PARAMETER C_SPLB1_USE_MPLB_ADDR = 0, DT = integer, VALUES = (0 = 'No', 1 = 'Yes'), DESC = 'Allow access to MPLB via SPLB1'
PARAMETER C_SPLB1_NUM_MPLB_ADDR_RNG = 0, DT = integer, RANGE = (0:4), DESC = 'Number of MPLB address ranges accessible via SPLB1'
PARAMETER C_SPLB1_RNG_MC_BASEADDR = 0xffffffff, DT = std_logic_vector(0 to 31), BUS = SPLB1, MIN_SIZE = 0x08000000, DESC = 'MCI address range accessible via SPLB1'
PARAMETER C_SPLB1_RNG_MC_HIGHADDR = 0x00000000, DT = std_logic_vector(0 to 31), BUS = SPLB1
PARAMETER C_SPLB1_RNG0_MPLB_BASEADDR = 0xffffffff, DT = std_logic_vector(0 to 31), BUS = SPLB1, BRIDGE_TO = MPLB, ISVALID = (C_SPLB1_NUM_MPLB_ADDR_RNG * C_SPLB1_USE_MPLB_ADDR >= 1), ADDR_TYPE = BRIDGE, MIN_SIZE = 0x08000000, DESC = 'Range 0 of MPLB addresses accessible via SPLB1'
PARAMETER C_SPLB1_RNG0_MPLB_HIGHADDR = 0x00000000, DT = std_logic_vector(0 to 31), BUS = SPLB1
PARAMETER C_SPLB1_RNG1_MPLB_BASEADDR = 0xffffffff, DT = std_logic_vector(0 to 31), BUS = SPLB1, BRIDGE_TO = MPLB, ISVALID = (C_SPLB1_NUM_MPLB_ADDR_RNG * C_SPLB1_USE_MPLB_ADDR >= 2), ADDR_TYPE = BRIDGE, MIN_SIZE = 0x08000000, DESC = 'Range 1 of MPLB addresses accessible via SPLB1'
PARAMETER C_SPLB1_RNG1_MPLB_HIGHADDR = 0x00000000, DT = std_logic_vector(0 to 31), BUS = SPLB1
PARAMETER C_SPLB1_RNG2_MPLB_BASEADDR = 0xffffffff, DT = std_logic_vector(0 to 31), BUS = SPLB1, BRIDGE_TO = MPLB, ISVALID = (C_SPLB1_NUM_MPLB_ADDR_RNG * C_SPLB1_USE_MPLB_ADDR >= 3), ADDR_TYPE = BRIDGE, MIN_SIZE = 0x08000000, DESC = 'Range 2 of MPLB addresses accessible via SPLB1'
PARAMETER C_SPLB1_RNG2_MPLB_HIGHADDR = 0x00000000, DT = std_logic_vector(0 to 31), BUS = SPLB1
PARAMETER C_SPLB1_RNG3_MPLB_BASEADDR = 0xffffffff, DT = std_logic_vector(0 to 31), BUS = SPLB1, BRIDGE_TO = MPLB, ISVALID = (C_SPLB1_NUM_MPLB_ADDR_RNG * C_SPLB1_USE_MPLB_ADDR >= 4), ADDR_TYPE = BRIDGE, MIN_SIZE = 0x08000000, DESC = 'Range 3 of MPLB addresses accessible via SPLB1'
PARAMETER C_SPLB1_RNG3_MPLB_HIGHADDR = 0x00000000, DT = std_logic_vector(0 to 31), BUS = SPLB1
PARAMETER C_SPLB1_NUM_MASTERS = 1, DT = INTEGER, BUS = SPLB1, ASSIGNMENT = UPDATE
PARAMETER C_SPLB1_MID_WIDTH = 1, DT = INTEGER, BUS = SPLB1, ASSIGNMENT = UPDATE
PARAMETER C_SPLB1_ALLOW_LOCK_XFER = 1, DT = integer, VALUES = (0 = 'No', 1 = 'Yes'), DESC = 'Allow locked transfers on SPLB1 '
PARAMETER C_SPLB1_READ_PIPE_ENABLE = 1, DT = integer, VALUES = (0 = 'No', 1 = 'Yes'), DESC = 'Allow read address pipelining on SPLB1'
PARAMETER C_SPLB1_PROPAGATE_MIRQ = 0, DT = integer, VALUES = (0 = 'No', 1 = 'Yes'), DESC = 'Propagate MIRQ signals from crossbar onto SPLB1 bus'
PARAMETER C_SPLB1_P2P = -1, DT = integer, BUS = SPLB1, ASSIGNMENT = UPDATE
PARAMETER C_NUM_DMA = 0, DT = INTEGER, RANGE = (0:4), DESC = 'Number of DMA channels to be used'
PARAMETER C_DMA0_TXCHANNELCTRL = 0x01010000, DT = BIT_VECTOR(0 to 31), ISVALID = (C_NUM_DMA > 0), DESC = 'DMA0 Transmit channel control register'
PARAMETER C_DMA0_RXCHANNELCTRL = 0x01010000, DT = BIT_VECTOR(0 to 31), ISVALID = (C_NUM_DMA > 0), DESC = 'DMA0 Receive channel control register'
PARAMETER C_DMA0_CONTROL = 0b00000000, DT = BIT_VECTOR(0 to 7), ISVALID = (C_NUM_DMA > 0), DESC = 'DMA0 interface control register'
PARAMETER C_DMA0_TXIRQTIMER = 0b1111111111, DT = BIT_VECTOR(0 to 9), ISVALID = (C_NUM_DMA > 0), DESC = 'DMA0 transmit IRQ coalescing clock divider ratio'
PARAMETER C_DMA0_RXIRQTIMER = 0b1111111111, DT = BIT_VECTOR(0 to 9), ISVALID = (C_NUM_DMA > 0), DESC = 'DMA0 receive IRQ coalescing clock divider ratio'
PARAMETER C_DMA1_TXCHANNELCTRL = 0x01010000, DT = BIT_VECTOR(0 to 31), ISVALID = (C_NUM_DMA > 1), DESC = 'DMA1 Transmit channel control register'
PARAMETER C_DMA1_RXCHANNELCTRL = 0x01010000, DT = BIT_VECTOR(0 to 31), ISVALID = (C_NUM_DMA > 1), DESC = 'DMA1 Receive channel control register'
PARAMETER C_DMA1_CONTROL = 0b00000000, DT = BIT_VECTOR(0 to 7), ISVALID = (C_NUM_DMA > 1), DESC = 'DMA1 interface control register'
PARAMETER C_DMA1_TXIRQTIMER = 0b1111111111, DT = BIT_VECTOR(0 to 9), ISVALID = (C_NUM_DMA > 1), DESC = 'DMA1 transmit IRQ coalescing clock divider ratio'
PARAMETER C_DMA1_RXIRQTIMER = 0b1111111111, DT = BIT_VECTOR(0 to 9), ISVALID = (C_NUM_DMA > 1), DESC = 'DMA1 receive IRQ coalescing clock divider ratio'
PARAMETER C_DMA2_TXCHANNELCTRL = 0x01010000, DT = BIT_VECTOR(0 to 31), ISVALID = (C_NUM_DMA > 2), DESC = 'DMA2 Transmit channel control register'
PARAMETER C_DMA2_RXCHANNELCTRL = 0x01010000, DT = BIT_VECTOR(0 to 31), ISVALID = (C_NUM_DMA > 2), DESC = 'DMA2 Receive channel control register'
PARAMETER C_DMA2_CONTROL = 0b00000000, DT = BIT_VECTOR(0 to 7), ISVALID = (C_NUM_DMA > 2), DESC = 'DMA2 interface control register'
PARAMETER C_DMA2_TXIRQTIMER = 0b1111111111, DT = BIT_VECTOR(0 to 9), ISVALID = (C_NUM_DMA > 2), DESC = 'DMA2 transmit IRQ coalescing clock divider ratio'
PARAMETER C_DMA2_RXIRQTIMER = 0b1111111111, DT = BIT_VECTOR(0 to 9), ISVALID = (C_NUM_DMA > 2), DESC = 'DMA2 receive IRQ coalescing clock divider ratio'
PARAMETER C_DMA3_TXCHANNELCTRL = 0x01010000, DT = BIT_VECTOR(0 to 31), ISVALID = (C_NUM_DMA > 3), DESC = 'DMA3 Transmit channel control register'
PARAMETER C_DMA3_RXCHANNELCTRL = 0x01010000, DT = BIT_VECTOR(0 to 31), ISVALID = (C_NUM_DMA > 3), DESC = 'DMA3 Receive channel control register'
PARAMETER C_DMA3_CONTROL = 0b00000000, DT = BIT_VECTOR(0 to 7), ISVALID = (C_NUM_DMA > 3), DESC = 'DMA3 interface control register'
PARAMETER C_DMA3_TXIRQTIMER = 0b1111111111, DT = BIT_VECTOR(0 to 9), ISVALID = (C_NUM_DMA > 3), DESC = 'DMA3 transmit IRQ coalescing clock divider ratio'
PARAMETER C_DMA3_RXIRQTIMER = 0b1111111111, DT = BIT_VECTOR(0 to 9), ISVALID = (C_NUM_DMA > 3), DESC = 'DMA3 receive IRQ coalescing clock divider ratio'
PARAMETER C_DCR_AUTOLOCK_ENABLE = 1, DT = INTEGER, VALUES = (0 = 'No', 1 = 'Yes'), DESC = 'Enable the auto-lock feature for the DCR indirect mode'
PARAMETER C_PPCDM_ASYNCMODE = 0, DT = INTEGER, VALUES = (0 = 'Synchronous', 1 = 'Asynchronous'), DESC = 'Synchronization mode for the external MDCR interface'
PARAMETER C_PPCDS_ASYNCMODE = 0, DT = INTEGER, VALUES = (0 = 'Synchronous', 1 = 'Asynchronous'), DESC = 'Synchronization mode for the external SDCR interface'
PARAMETER C_GENERATE_PLB_TIMESPECS = 1, DT = INTEGER, TYPE = NON_HDL, VALUES = (0 = 'No', 1 = 'Yes'), DESC = 'Generate TimeSpecs for SPLB0, SPLB1 MBusy output resynchronization flops'

## Ports
PORT CPMC440CLK = "", DIR = I, INITIALVAL = VCC, SIGIS = CLK
PORT CPMC440CLKEN = "", DIR = I, INITIALVAL = VCC
PORT CPMINTERCONNECTCLK = "", DIR = I, INITIALVAL = VCC, SIGIS = CLK
PORT CPMINTERCONNECTCLKEN = "", DIR = I, INITIALVAL = VCC
PORT CPMINTERCONNECTCLKNTO1 = "", DIR = I, INITIALVAL = VCC
PORT CPMC440CORECLOCKINACTIVE = "", DIR = I
PORT CPMC440TIMERCLOCK = "", DIR = I, INITIALVAL = VCC, SIGIS = CLK
PORT C440MACHINECHECK = "", DIR = O
PORT C440CPMCORESLEEPREQ = "", DIR = O
PORT C440CPMDECIRPTREQ = "", DIR = O
PORT C440CPMFITIRPTREQ = "", DIR = O
PORT C440CPMMSRCE = "", DIR = O
PORT C440CPMMSREE = "", DIR = O
PORT C440CPMTIMERRESETREQ = "", DIR = O
PORT C440CPMWDIRPTREQ = "", DIR = O
PORT PPCCPMINTERCONNECTBUSY = "", DIR = O
PORT DBGC440DEBUGHALT = "", DIR = I, PERMIT = BASE_USER, DESC = 'JTAG HALT', IO_IF = cpudbg_0, IO_IS = cpu_halt
PORT DBGC440DEBUGHALTNEG = "", DIR = I, INITIALVAL = VCC, PERMIT = BASE_USER, DESC = 'JTAG HALT INV', IO_IF = cpudbg_0, IO_IS = cpu_halt_neg
PORT DBGC440SYSTEMSTATUS = "", DIR = I, VEC = [0:4]
PORT DBGC440UNCONDDEBUGEVENT = "", DIR = I
PORT C440DBGSYSTEMCONTROL = "", DIR = O, VEC = [0:7]
PORT SPLB0_Error = "", DIR = O, VEC = [0:3]
PORT SPLB1_Error = "", DIR = O, VEC = [0:3]
PORT EICC440CRITIRQ = "", DIR = I, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH
PORT EICC440EXTIRQ = "", DIR = I, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH
PORT PPCEICINTERCONNECTIRQ = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, INTERRUPT_PRIORITY = HIGH
PORT CPMDCRCLK = "", DIR = I, INITIALVAL = VCC, SIGIS = CLK
PORT DCRPPCDMACK = DCR_Ack, DIR = I, BUS = MDCR
PORT DCRPPCDMDBUSIN = DCR_M_DBus, DIR = I, VEC = [0:31], BUS = MDCR
PORT DCRPPCDMTIMEOUTWAIT = DCR_TimeoutWait, DIR = I, BUS = MDCR
PORT PPCDMDCRREAD = M_dcrRead, DIR = O, BUS = MDCR
PORT PPCDMDCRWRITE = M_dcrWrite, DIR = O, BUS = MDCR
PORT PPCDMDCRABUS = M_dcrABus, DIR = O, VEC = [0:9], BUS = MDCR
PORT PPCDMDCRDBUSOUT = M_dcrDBus, DIR = O, VEC = [0:31], BUS = MDCR
PORT DCRPPCDSREAD = DCR_Read, DIR = I, BUS = SDCR
PORT DCRPPCDSWRITE = DCR_Write, DIR = I, BUS = SDCR
PORT DCRPPCDSABUS = DCR_ABus, DIR = I, VEC = [0:9], BUS = SDCR
PORT DCRPPCDSDBUSOUT = DCR_Sl_DBus, DIR = I, VEC = [0:31], BUS = SDCR
PORT PPCDSDCRACK = Sl_dcrAck, DIR = O, BUS = SDCR
PORT PPCDSDCRDBUSIN = Sl_dcrDBus, DIR = O, VEC = [0:31], BUS = SDCR
PORT PPCDSDCRTIMEOUTWAIT = Sl_dcrTimeoutWait, DIR = O, BUS = SDCR
PORT CPMFCMCLK = "", DIR = I, INITIALVAL = VCC, SIGIS = CLK, BUS = MFCB
PORT FCMAPUCR = FCMAPUCR, DIR = I, VEC = [0:3], BUS = MFCM:MFCB
PORT FCMAPUDONE = FCMAPUDONE, DIR = I, BUS = MFCM:MFCB
PORT FCMAPUEXCEPTION = FCMAPUEXCEPTION, DIR = I, BUS = MFCM:MFCB
PORT FCMAPUFPSCRFEX = FCMAPUFPSCRFEX, DIR = I, BUS = MFCM:MFCB
PORT FCMAPURESULT = FCMAPURESULT, DIR = I, VEC = [0:31], BUS = MFCM:MFCB
PORT FCMAPURESULTVALID = FCMAPURESULTVALID, DIR = I, BUS = MFCM:MFCB
PORT FCMAPUSLEEPNOTREADY = FCMAPUSLEEPNOTREADY, DIR = I, BUS = MFCM:MFCB
PORT FCMAPUCONFIRMINSTR = FCMAPUCONFIRMINSTR, DIR = I, BUS = MFCM:MFCB
PORT FCMAPUSTOREDATA = FCMAPUSTOREDATA, DIR = I, VEC = [0:127], BUS = MFCM:MFCB
PORT APUFCMDECNONAUTON = APUFCMDECNONAUTON, DIR = O, BUS = MFCM:MFCB
PORT APUFCMDECFPUOP = APUFCMDECFPUOP, DIR = O, BUS = MFCM:MFCB
PORT APUFCMDECLDSTXFERSIZE = APUFCMDECLDSTXFERSIZE, DIR = O, VEC = [0:2], BUS = MFCM:MFCB
PORT APUFCMDECLOAD = APUFCMDECLOAD, DIR = O, BUS = MFCM:MFCB
PORT APUFCMNEXTINSTRREADY = APUFCMNEXTINSTRREADY, DIR = O, BUS = MFCM:MFCB
PORT APUFCMDECSTORE = APUFCMDECSTORE, DIR = O, BUS = MFCM:MFCB
PORT APUFCMDECUDI = APUFCMDECUDI, DIR = O, VEC = [0:3], BUS = MFCM:MFCB
PORT APUFCMDECUDIVALID = APUFCMDECUDIVALID, DIR = O, BUS = MFCM:MFCB
PORT APUFCMENDIAN = APUFCMENDIAN, DIR = O, BUS = MFCM:MFCB
PORT APUFCMFLUSH = APUFCMFLUSH, DIR = O, BUS = MFCM:MFCB
PORT APUFCMINSTRUCTION = APUFCMINSTRUCTION, DIR = O, VEC = [0:31], BUS = MFCM:MFCB
PORT APUFCMINSTRVALID = APUFCMINSTRVALID, DIR = O, BUS = MFCM:MFCB
PORT APUFCMLOADBYTEADDR = APUFCMLOADBYTEADDR, DIR = O, VEC = [0:3], BUS = MFCM:MFCB
PORT APUFCMLOADDATA = APUFCMLOADDATA, DIR = O, VEC = [0:127], BUS = MFCM:MFCB
PORT APUFCMLOADDVALID = APUFCMLOADDVALID, DIR = O, BUS = MFCM:MFCB
PORT APUFCMOPERANDVALID = APUFCMOPERANDVALID, DIR = O, BUS = MFCM:MFCB
PORT APUFCMRADATA = APUFCMRADATA, DIR = O, VEC = [0:31], BUS = MFCM:MFCB
PORT APUFCMRBDATA = APUFCMRBDATA, DIR = O, VEC = [0:31], BUS = MFCM:MFCB
PORT APUFCMWRITEBACKOK = APUFCMWRITEBACKOK, DIR = O, BUS = MFCM:MFCB
PORT APUFCMMSRFE0 = APUFCMMSRFE0, DIR = O, BUS = MFCM:MFCB
PORT APUFCMMSRFE1 = APUFCMMSRFE1, DIR = O, BUS = MFCM:MFCB
PORT JTGC440TCK = JTGC405TCK, DIR = I, INITIALVAL = VCC, BUS = JTAGPPC, PERMIT = BASE_USER, DESC = 'JTAG TCK', IO_IF = cpudbg_0, IO_IS = cpu_tck
PORT JTGC440TDI = JTGC405TDI, DIR = I, INITIALVAL = VCC, BUS = JTAGPPC, PERMIT = BASE_USER, DESC = 'JTAG TDI', IO_IF = cpudbg_0, IO_IS = cpu_tdi
PORT JTGC440TMS = JTGC405TMS, DIR = I, INITIALVAL = VCC, BUS = JTAGPPC, PERMIT = BASE_USER, DESC = 'JTAG TMS', IO_IF = cpudbg_0, IO_IS = cpu_tms
PORT JTGC440TRSTNEG = JTGC405TRSTNEG, DIR = I, INITIALVAL = VCC, BUS = JTAGPPC, PERMIT = BASE_USER, DESC = 'JTAG TRST', IO_IF = cpudbg_0, IO_IS = cpu_trst
PORT C440JTGTDO = C405JTGTDO, DIR = O, BUS = JTAGPPC, PERMIT = BASE_USER, DESC = 'JTAG TDO', IO_IF = cpudbg_0, IO_IS = cpu_tdo
PORT C440JTGTDOEN = C405JTGTDOEN, DIR = O, BUS = JTAGPPC
PORT CPMMCCLK = "", DIR = I, INITIALVAL = VCC, SIGIS = CLK
PORT MCMIREADDATA = MCMIREADDATA, DIR = I, VEC = [0:127], BUS = PPC440MC
PORT MCMIREADDATAVALID = MCMIREADDATAVALID, DIR = I, BUS = PPC440MC
PORT MCMIREADDATAERR = MCMIREADDATAERR, DIR = I, BUS = PPC440MC
PORT MCMIADDRREADYTOACCEPT = MCMIADDRREADYTOACCEPT, DIR = I, INITIALVAL = VCC, BUS = PPC440MC
PORT MIMCREADNOTWRITE = MIMCREADNOTWRITE, DIR = O, BUS = PPC440MC
PORT MIMCADDRESS = MIMCADDRESS, DIR = O, VEC = [0:35], BUS = PPC440MC
PORT MIMCADDRESSVALID = MIMCADDRESSVALID, DIR = O, BUS = PPC440MC
PORT MIMCWRITEDATA = MIMCWRITEDATA, DIR = O, VEC = [0:127], BUS = PPC440MC
PORT MIMCWRITEDATAVALID = MIMCWRITEDATAVALID, DIR = O, BUS = PPC440MC
PORT MIMCBYTEENABLE = MIMCBYTEENABLE, DIR = O, VEC = [0:15], BUS = PPC440MC
PORT MIMCBANKCONFLICT = MIMCBANKCONFLICT, DIR = O, BUS = PPC440MC
PORT MIMCROWCONFLICT = MIMCROWCONFLICT, DIR = O, BUS = PPC440MC
PORT CPMPPCMPLBCLK = "", DIR = I, INITIALVAL = VCC, SIGIS = CLK, BUS = MPLB
PORT PLBPPCMMBUSY = PLB_MBusy, DIR = I, BUS = MPLB
PORT PLBPPCMMIRQ = PLB_MIRQ, DIR = I, BUS = MPLB
PORT PLBPPCMMRDERR = PLB_MRdErr, DIR = I, BUS = MPLB
PORT PLBPPCMMWRERR = PLB_MWrErr, DIR = I, BUS = MPLB
PORT PLBPPCMADDRACK = PLB_MAddrAck, DIR = I, BUS = MPLB
PORT PLBPPCMRDBTERM = PLB_MRdBTerm, DIR = I, BUS = MPLB
PORT PLBPPCMRDDACK = PLB_MRdDAck, DIR = I, BUS = MPLB
PORT PLBPPCMRDDBUS = PLB_MRdDBus, DIR = I, VEC = [0:127], BUS = MPLB
PORT PLBPPCMRDWDADDR = PLB_MRdWdAddr, DIR = I, VEC = [0:3], BUS = MPLB
PORT PLBPPCMREARBITRATE = PLB_MRearbitrate, DIR = I, BUS = MPLB
PORT PLBPPCMSSIZE = PLB_MSSize, DIR = I, VEC = [0:1], BUS = MPLB
PORT PLBPPCMTIMEOUT = PLB_MTimeout, DIR = I, BUS = MPLB
PORT PLBPPCMWRBTERM = PLB_MWrBTerm, DIR = I, BUS = MPLB
PORT PLBPPCMWRDACK = PLB_MWrDAck, DIR = I, BUS = MPLB
PORT PLBPPCMRDPENDPRI = PLB_rdPendPri, DIR = I, VEC = [0:1], BUS = MPLB
PORT PLBPPCMRDPENDREQ = PLB_rdPendReq, DIR = I, BUS = MPLB
PORT PLBPPCMREQPRI = PLB_reqPri, DIR = I, VEC = [0:1], BUS = MPLB
PORT PLBPPCMWRPENDPRI = PLB_wrPendPri, DIR = I, VEC = [0:1], BUS = MPLB
PORT PLBPPCMWRPENDREQ = PLB_wrPendReq, DIR = I, BUS = MPLB
PORT PPCMPLBABORT = M_abort, DIR = O, BUS = MPLB
PORT PPCMPLBABUS = M_ABus, DIR = O, VEC = [0:31], BUS = MPLB
PORT PPCMPLBBE = M_BE, DIR = O, VEC = [0:15], BUS = MPLB
PORT PPCMPLBBUSLOCK = M_busLock, DIR = O, BUS = MPLB
PORT PPCMPLBLOCKERR = M_lockErr, DIR = O, BUS = MPLB
PORT PPCMPLBMSIZE = M_MSize, DIR = O, VEC = [0:1], BUS = MPLB
PORT PPCMPLBPRIORITY = M_priority, DIR = O, VEC = [0:1], BUS = MPLB
PORT PPCMPLBRDBURST = M_rdBurst, DIR = O, BUS = MPLB
PORT PPCMPLBREQUEST = M_request, DIR = O, BUS = MPLB
PORT PPCMPLBRNW = M_RNW, DIR = O, BUS = MPLB
PORT PPCMPLBSIZE = M_size, DIR = O, VEC = [0:3], BUS = MPLB
PORT PPCMPLBTATTRIBUTE = M_TAttribute, DIR = O, VEC = [0:15], BUS = MPLB
PORT PPCMPLBTYPE = M_type, DIR = O, VEC = [0:2], BUS = MPLB
PORT PPCMPLBUABUS = M_UABus, DIR = O, VEC = [0:31], BUS = MPLB
PORT PPCMPLBWRBURST = M_wrBurst, DIR = O, BUS = MPLB
PORT PPCMPLBWRDBUS = M_wrDBus, DIR = O, VEC = [0:127], BUS = MPLB
PORT CPMPPCS0PLBCLK = "", DIR = I, INITIALVAL = VCC, SIGIS = CLK, BUS = SPLB0
PORT PLBPPCS0MASTERID = PLB_masterID, DIR = I, VEC = [0:(C_SPLB0_MID_WIDTH-1)], BUS = SPLB0
PORT PLBPPCS0PAVALID = PLB_PAValid, DIR = I, BUS = SPLB0
PORT PLBPPCS0SAVALID = PLB_SAValid, DIR = I, BUS = SPLB0
PORT PLBPPCS0RDPENDREQ = PLB_rdPendReq, DIR = I, BUS = SPLB0
PORT PLBPPCS0WRPENDREQ = PLB_wrPendReq, DIR = I, BUS = SPLB0
PORT PLBPPCS0RDPENDPRI = PLB_rdPendPri, DIR = I, VEC = [0:1], BUS = SPLB0
PORT PLBPPCS0WRPENDPRI = PLB_wrPendPri, DIR = I, VEC = [0:1], BUS = SPLB0
PORT PLBPPCS0REQPRI = PLB_reqPri, DIR = I, VEC = [0:1], BUS = SPLB0
PORT PLBPPCS0RDPRIM = PLB_rdPrim, DIR = I, BUS = SPLB0
PORT PLBPPCS0WRPRIM = PLB_wrPrim, DIR = I, BUS = SPLB0
PORT PLBPPCS0BUSLOCK = PLB_busLock, DIR = I, BUS = SPLB0
PORT PLBPPCS0ABORT = PLB_abort, DIR = I, BUS = SPLB0
PORT PLBPPCS0RNW = PLB_RNW, DIR = I, BUS = SPLB0
PORT PLBPPCS0BE = PLB_BE, DIR = I, VEC = [0:15], BUS = SPLB0
PORT PLBPPCS0SIZE = PLB_size, DIR = I, VEC = [0:3], BUS = SPLB0
PORT PLBPPCS0TYPE = PLB_type, DIR = I, VEC = [0:2], BUS = SPLB0
PORT PLBPPCS0TATTRIBUTE = PLB_TAttribute, DIR = I, VEC = [0:15], BUS = SPLB0
PORT PLBPPCS0LOCKERR = PLB_lockErr, DIR = I, BUS = SPLB0
PORT PLBPPCS0MSIZE = PLB_MSize, DIR = I, VEC = [0:1], BUS = SPLB0
PORT PLBPPCS0UABUS = PLB_UABus, DIR = I, VEC = [0:31], BUS = SPLB0
PORT PLBPPCS0ABUS = PLB_ABus, DIR = I, VEC = [0:31], BUS = SPLB0
PORT PLBPPCS0WRDBUS = PLB_wrDBus, DIR = I, VEC = [0:127], BUS = SPLB0
PORT PLBPPCS0WRBURST = PLB_wrBurst, DIR = I, BUS = SPLB0
PORT PLBPPCS0RDBURST = PLB_rdBurst, DIR = I, BUS = SPLB0
PORT PPCS0PLBADDRACK = Sl_addrAck, DIR = O, BUS = SPLB0
PORT PPCS0PLBWAIT = Sl_wait, DIR = O, BUS = SPLB0
PORT PPCS0PLBREARBITRATE = Sl_rearbitrate, DIR = O, BUS = SPLB0
PORT PPCS0PLBWRDACK = Sl_wrDAck, DIR = O, BUS = SPLB0
PORT PPCS0PLBWRCOMP = Sl_wrComp, DIR = O, BUS = SPLB0
PORT PPCS0PLBRDDBUS = Sl_rdDBus, DIR = O, VEC = [0:127], BUS = SPLB0
PORT PPCS0PLBRDWDADDR = Sl_rdWdAddr, DIR = O, VEC = [0:3], BUS = SPLB0
PORT PPCS0PLBRDDACK = Sl_rdDAck, DIR = O, BUS = SPLB0
PORT PPCS0PLBRDCOMP = Sl_rdComp, DIR = O, BUS = SPLB0
PORT PPCS0PLBRDBTERM = Sl_rdBTerm, DIR = O, BUS = SPLB0
PORT PPCS0PLBWRBTERM = Sl_wrBTerm, DIR = O, BUS = SPLB0
PORT PPCS0PLBMBUSY = Sl_MBusy, DIR = O, VEC = [0:(C_SPLB0_NUM_MASTERS-1)], BUS = SPLB0
PORT PPCS0PLBMRDERR = Sl_MRdErr, DIR = O, VEC = [0:(C_SPLB0_NUM_MASTERS-1)], BUS = SPLB0
PORT PPCS0PLBMWRERR = Sl_MWrErr, DIR = O, VEC = [0:(C_SPLB0_NUM_MASTERS-1)], BUS = SPLB0
PORT PPCS0PLBMIRQ = Sl_MIRQ, DIR = O, VEC = [0:(C_SPLB0_NUM_MASTERS-1)], BUS = SPLB0
PORT PPCS0PLBSSIZE = Sl_SSize, DIR = O, VEC = [0:1], BUS = SPLB0
PORT CPMPPCS1PLBCLK = "", DIR = I, INITIALVAL = VCC, SIGIS = CLK, BUS = SPLB1
PORT PLBPPCS1MASTERID = PLB_masterID, DIR = I, VEC = [0:(C_SPLB1_MID_WIDTH-1)], BUS = SPLB1
PORT PLBPPCS1PAVALID = PLB_PAValid, DIR = I, BUS = SPLB1
PORT PLBPPCS1SAVALID = PLB_SAValid, DIR = I, BUS = SPLB1
PORT PLBPPCS1RDPENDREQ = PLB_rdPendReq, DIR = I, BUS = SPLB1
PORT PLBPPCS1WRPENDREQ = PLB_wrPendReq, DIR = I, BUS = SPLB1
PORT PLBPPCS1RDPENDPRI = PLB_rdPendPri, DIR = I, VEC = [0:1], BUS = SPLB1
PORT PLBPPCS1WRPENDPRI = PLB_wrPendPri, DIR = I, VEC = [0:1], BUS = SPLB1
PORT PLBPPCS1REQPRI = PLB_reqPri, DIR = I, VEC = [0:1], BUS = SPLB1
PORT PLBPPCS1RDPRIM = PLB_rdPrim, DIR = I, BUS = SPLB1
PORT PLBPPCS1WRPRIM = PLB_wrPrim, DIR = I, BUS = SPLB1
PORT PLBPPCS1BUSLOCK = PLB_busLock, DIR = I, BUS = SPLB1
PORT PLBPPCS1ABORT = PLB_abort, DIR = I, BUS = SPLB1
PORT PLBPPCS1RNW = PLB_RNW, DIR = I, BUS = SPLB1
PORT PLBPPCS1BE = PLB_BE, DIR = I, VEC = [0:15], BUS = SPLB1
PORT PLBPPCS1SIZE = PLB_size, DIR = I, VEC = [0:3], BUS = SPLB1
PORT PLBPPCS1TYPE = PLB_type, DIR = I, VEC = [0:2], BUS = SPLB1
PORT PLBPPCS1TATTRIBUTE = PLB_TAttribute, DIR = I, VEC = [0:15], BUS = SPLB1
PORT PLBPPCS1LOCKERR = PLB_lockErr, DIR = I, BUS = SPLB1
PORT PLBPPCS1MSIZE = PLB_MSize, DIR = I, VEC = [0:1], BUS = SPLB1
PORT PLBPPCS1UABUS = PLB_UABus, DIR = I, VEC = [0:31], BUS = SPLB1
PORT PLBPPCS1ABUS = PLB_ABus, DIR = I, VEC = [0:31], BUS = SPLB1
PORT PLBPPCS1WRDBUS = PLB_wrDBus, DIR = I, VEC = [0:127], BUS = SPLB1
PORT PLBPPCS1WRBURST = PLB_wrBurst, DIR = I, BUS = SPLB1
PORT PLBPPCS1RDBURST = PLB_rdBurst, DIR = I, BUS = SPLB1
PORT PPCS1PLBADDRACK = Sl_addrAck, DIR = O, BUS = SPLB1
PORT PPCS1PLBWAIT = Sl_wait, DIR = O, BUS = SPLB1
PORT PPCS1PLBREARBITRATE = Sl_rearbitrate, DIR = O, BUS = SPLB1
PORT PPCS1PLBWRDACK = Sl_wrDAck, DIR = O, BUS = SPLB1
PORT PPCS1PLBWRCOMP = Sl_wrComp, DIR = O, BUS = SPLB1
PORT PPCS1PLBRDDBUS = Sl_rdDBus, DIR = O, VEC = [0:127], BUS = SPLB1
PORT PPCS1PLBRDWDADDR = Sl_rdWdAddr, DIR = O, VEC = [0:3], BUS = SPLB1
PORT PPCS1PLBRDDACK = Sl_rdDAck, DIR = O, BUS = SPLB1
PORT PPCS1PLBRDCOMP = Sl_rdComp, DIR = O, BUS = SPLB1
PORT PPCS1PLBRDBTERM = Sl_rdBTerm, DIR = O, BUS = SPLB1
PORT PPCS1PLBWRBTERM = Sl_wrBTerm, DIR = O, BUS = SPLB1
PORT PPCS1PLBMBUSY = Sl_MBusy, DIR = O, VEC = [0:(C_SPLB1_NUM_MASTERS-1)], BUS = SPLB1
PORT PPCS1PLBMRDERR = Sl_MRdErr, DIR = O, VEC = [0:(C_SPLB1_NUM_MASTERS-1)], BUS = SPLB1
PORT PPCS1PLBMWRERR = Sl_MWrErr, DIR = O, VEC = [0:(C_SPLB1_NUM_MASTERS-1)], BUS = SPLB1
PORT PPCS1PLBMIRQ = Sl_MIRQ, DIR = O, VEC = [0:(C_SPLB1_NUM_MASTERS-1)], BUS = SPLB1
PORT PPCS1PLBSSIZE = Sl_SSize, DIR = O, VEC = [0:1], BUS = SPLB1
PORT CPMDMA0LLCLK = "", DIR = I, INITIALVAL = VCC, SIGIS = CLK, ISVALID = (C_NUM_DMA > 0)
PORT LLDMA0TXDSTRDYN = LL_Tx_DstRdy_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA0
PORT LLDMA0RXD = LL_Rx_Data, DIR = I, VEC = [0:31], BUS = LLDMA0
PORT LLDMA0RXREM = LL_Rx_Rem, DIR = I, VEC = [0:3], BUS = LLDMA0
PORT LLDMA0RXSOFN = LL_Rx_SOF_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA0
PORT LLDMA0RXEOFN = LL_Rx_EOF_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA0
PORT LLDMA0RXSOPN = LL_Rx_SOP_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA0
PORT LLDMA0RXEOPN = LL_Rx_EOP_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA0
PORT LLDMA0RXSRCRDYN = LL_Rx_SrcRdy_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA0
PORT LLDMA0RSTENGINEREQ = "", DIR = I, ISVALID = (C_NUM_DMA > 0)
PORT DMA0LLTXD = LL_Tx_Data, DIR = O, VEC = [0:31], BUS = LLDMA0
PORT DMA0LLTXREM = LL_Tx_Rem, DIR = O, VEC = [0:3], BUS = LLDMA0
PORT DMA0LLTXSOFN = LL_Tx_SOF_n, DIR = O, BUS = LLDMA0
PORT DMA0LLTXEOFN = LL_Tx_EOF_n, DIR = O, BUS = LLDMA0
PORT DMA0LLTXSOPN = LL_Tx_SOP_n, DIR = O, BUS = LLDMA0
PORT DMA0LLTXEOPN = LL_Tx_EOP_n, DIR = O, BUS = LLDMA0
PORT DMA0LLTXSRCRDYN = LL_Tx_SrcRdy_n, DIR = O, BUS = LLDMA0
PORT DMA0LLRXDSTRDYN = LL_Rx_DstRdy_n, DIR = O, BUS = LLDMA0
PORT DMA0LLRSTENGINEACK = LL_RST_ACK, DIR = O, BUS = LLDMA0, ISVALID = (C_NUM_DMA > 0)
PORT DMA0TXIRQ = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, INTERRUPT_PRIORITY = HIGH, ISVALID = (C_NUM_DMA > 0)
PORT DMA0RXIRQ = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, INTERRUPT_PRIORITY = HIGH, ISVALID = (C_NUM_DMA > 0)
PORT CPMDMA1LLCLK = "", DIR = I, INITIALVAL = VCC, SIGIS = CLK, ISVALID = (C_NUM_DMA > 1)
PORT LLDMA1TXDSTRDYN = LL_Tx_DstRdy_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA1
PORT LLDMA1RXD = LL_Rx_Data, DIR = I, VEC = [0:31], BUS = LLDMA1
PORT LLDMA1RXREM = LL_Rx_Rem, DIR = I, VEC = [0:3], BUS = LLDMA1
PORT LLDMA1RXSOFN = LL_Rx_SOF_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA1
PORT LLDMA1RXEOFN = LL_Rx_EOF_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA1
PORT LLDMA1RXSOPN = LL_Rx_SOP_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA1
PORT LLDMA1RXEOPN = LL_Rx_EOP_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA1
PORT LLDMA1RXSRCRDYN = LL_Rx_SrcRdy_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA1
PORT LLDMA1RSTENGINEREQ = "", DIR = I, ISVALID = (C_NUM_DMA > 1)
PORT DMA1LLTXD = LL_Tx_Data, DIR = O, VEC = [0:31], BUS = LLDMA1
PORT DMA1LLTXREM = LL_Tx_Rem, DIR = O, VEC = [0:3], BUS = LLDMA1
PORT DMA1LLTXSOFN = LL_Tx_SOF_n, DIR = O, BUS = LLDMA1
PORT DMA1LLTXEOFN = LL_Tx_EOF_n, DIR = O, BUS = LLDMA1
PORT DMA1LLTXSOPN = LL_Tx_SOP_n, DIR = O, BUS = LLDMA1
PORT DMA1LLTXEOPN = LL_Tx_EOP_n, DIR = O, BUS = LLDMA1
PORT DMA1LLTXSRCRDYN = LL_Tx_SrcRdy_n, DIR = O, BUS = LLDMA1
PORT DMA1LLRXDSTRDYN = LL_Rx_DstRdy_n, DIR = O, BUS = LLDMA1
PORT DMA1LLRSTENGINEACK = LL_RST_ACK, DIR = O, BUS = LLDMA1, ISVALID = (C_NUM_DMA > 1)
PORT DMA1TXIRQ = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, INTERRUPT_PRIORITY = HIGH, ISVALID = (C_NUM_DMA > 1)
PORT DMA1RXIRQ = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, INTERRUPT_PRIORITY = HIGH, ISVALID = (C_NUM_DMA > 1)
PORT CPMDMA2LLCLK = "", DIR = I, INITIALVAL = VCC, SIGIS = CLK, ISVALID = (C_NUM_DMA > 2)
PORT LLDMA2TXDSTRDYN = LL_Tx_DstRdy_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA2
PORT LLDMA2RXD = LL_Rx_Data, DIR = I, VEC = [0:31], BUS = LLDMA2
PORT LLDMA2RXREM = LL_Rx_Rem, DIR = I, VEC = [0:3], BUS = LLDMA2
PORT LLDMA2RXSOFN = LL_Rx_SOF_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA2
PORT LLDMA2RXEOFN = LL_Rx_EOF_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA2
PORT LLDMA2RXSOPN = LL_Rx_SOP_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA2
PORT LLDMA2RXEOPN = LL_Rx_EOP_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA2
PORT LLDMA2RXSRCRDYN = LL_Rx_SrcRdy_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA2
PORT LLDMA2RSTENGINEREQ = "", DIR = I, ISVALID = (C_NUM_DMA > 2)
PORT DMA2LLTXD = LL_Tx_Data, DIR = O, VEC = [0:31], BUS = LLDMA2
PORT DMA2LLTXREM = LL_Tx_Rem, DIR = O, VEC = [0:3], BUS = LLDMA2
PORT DMA2LLTXSOFN = LL_Tx_SOF_n, DIR = O, BUS = LLDMA2
PORT DMA2LLTXEOFN = LL_Tx_EOF_n, DIR = O, BUS = LLDMA2
PORT DMA2LLTXSOPN = LL_Tx_SOP_n, DIR = O, BUS = LLDMA2
PORT DMA2LLTXEOPN = LL_Tx_EOP_n, DIR = O, BUS = LLDMA2
PORT DMA2LLTXSRCRDYN = LL_Tx_SrcRdy_n, DIR = O, BUS = LLDMA2
PORT DMA2LLRXDSTRDYN = LL_Rx_DstRdy_n, DIR = O, BUS = LLDMA2
PORT DMA2LLRSTENGINEACK = LL_RST_ACK, DIR = O, BUS = LLDMA2, ISVALID = (C_NUM_DMA > 2)
PORT DMA2TXIRQ = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, INTERRUPT_PRIORITY = HIGH, ISVALID = (C_NUM_DMA > 2)
PORT DMA2RXIRQ = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, INTERRUPT_PRIORITY = HIGH, ISVALID = (C_NUM_DMA > 2)
PORT CPMDMA3LLCLK = "", DIR = I, INITIALVAL = VCC, SIGIS = CLK, ISVALID = (C_NUM_DMA > 3)
PORT LLDMA3TXDSTRDYN = LL_Tx_DstRdy_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA3
PORT LLDMA3RXD = LL_Rx_Data, DIR = I, VEC = [0:31], BUS = LLDMA3
PORT LLDMA3RXREM = LL_Rx_Rem, DIR = I, VEC = [0:3], BUS = LLDMA3
PORT LLDMA3RXSOFN = LL_Rx_SOF_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA3
PORT LLDMA3RXEOFN = LL_Rx_EOF_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA3
PORT LLDMA3RXSOPN = LL_Rx_SOP_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA3
PORT LLDMA3RXEOPN = LL_Rx_EOP_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA3
PORT LLDMA3RXSRCRDYN = LL_Rx_SrcRdy_n, DIR = I, INITIALVAL = VCC, BUS = LLDMA3
PORT LLDMA3RSTENGINEREQ = "", DIR = I, ISVALID = (C_NUM_DMA > 3)
PORT DMA3LLTXD = LL_Tx_Data, DIR = O, VEC = [0:31], BUS = LLDMA3
PORT DMA3LLTXREM = LL_Tx_Rem, DIR = O, VEC = [0:3], BUS = LLDMA3
PORT DMA3LLTXSOFN = LL_Tx_SOF_n, DIR = O, BUS = LLDMA3
PORT DMA3LLTXEOFN = LL_Tx_EOF_n, DIR = O, BUS = LLDMA3
PORT DMA3LLTXSOPN = LL_Tx_SOP_n, DIR = O, BUS = LLDMA3
PORT DMA3LLTXEOPN = LL_Tx_EOP_n, DIR = O, BUS = LLDMA3
PORT DMA3LLTXSRCRDYN = LL_Tx_SrcRdy_n, DIR = O, BUS = LLDMA3
PORT DMA3LLRXDSTRDYN = LL_Rx_DstRdy_n, DIR = O, BUS = LLDMA3
PORT DMA3LLRSTENGINEACK = LL_RST_ACK, DIR = O, BUS = LLDMA3, ISVALID = (C_NUM_DMA > 3)
PORT DMA3TXIRQ = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, INTERRUPT_PRIORITY = HIGH, ISVALID = (C_NUM_DMA > 3)
PORT DMA3RXIRQ = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, INTERRUPT_PRIORITY = HIGH, ISVALID = (C_NUM_DMA > 3)
PORT RSTC440RESETCORE = RstcPPCresetcore, DIR = I, SIGIS = RST, BUS = RESETPPC
PORT RSTC440RESETCHIP = RstsPPCresetchip, DIR = I, SIGIS = RST, BUS = RESETPPC
PORT RSTC440RESETSYSTEM = RstcPPCresetsys, DIR = I, SIGIS = RST, BUS = RESETPPC
PORT C440RSTCORERESETREQ = Core_Reset_Req, DIR = O, SIGIS = RST, BUS = RESETPPC
PORT C440RSTCHIPRESETREQ = Chip_Reset_Req, DIR = O, SIGIS = RST, BUS = RESETPPC
PORT C440RSTSYSTEMRESETREQ = System_Reset_Req, DIR = O, SIGIS = RST, BUS = RESETPPC
PORT TRCC440TRACEDISABLE = "", DIR = I
PORT TRCC440TRIGGEREVENTIN = "", DIR = I, PERMIT = BASE_USER, DESC = 'Trace Trigger Event In', IO_IF = trace_0, IO_IS = trace_trigger_event_in
PORT C440TRCBRANCHSTATUS = "", DIR = O, VEC = [0:2], PERMIT = BASE_USER, DESC = 'Trace Branch Status', IO_IF = trace_0, IO_IS = branch_status
PORT C440TRCCYCLE = "", DIR = O, PERMIT = BASE_USER, DESC = 'Trace Clock', IO_IF = trace_0, IO_IS = trace_clk
PORT C440TRCEXECUTIONSTATUS = "", DIR = O, VEC = [0:4], PERMIT = BASE_USER, DESC = 'Trace Execution Status', IO_IF = trace_0, IO_IS = exec_status
PORT C440TRCTRACESTATUS = "", DIR = O, VEC = [0:6], PERMIT = BASE_USER, DESC = 'Trace Status', IO_IF = trace_0, IO_IS = trace_status
PORT C440TRCTRIGGEREVENTOUT = "", DIR = O, PERMIT = BASE_USER, DESC = 'Trace Trigger Event Out', IO_IF = trace_0, IO_IS = trace_trigger_event_out
PORT C440TRCTRIGGEREVENTTYPE = "", DIR = O, VEC = [0:13]

END
